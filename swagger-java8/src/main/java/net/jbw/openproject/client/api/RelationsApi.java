/*
 * OpenProject API v3
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package net.jbw.openproject.client.api;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.jbw.openproject.client.invoker.ApiCallback;
import net.jbw.openproject.client.invoker.ApiClient;
import net.jbw.openproject.client.invoker.ApiException;
import net.jbw.openproject.client.invoker.ApiResponse;
import net.jbw.openproject.client.invoker.Configuration;
import net.jbw.openproject.client.invoker.Pair;
import net.jbw.openproject.client.invoker.ProgressRequestBody;
import net.jbw.openproject.client.invoker.ProgressResponseBody;

public class RelationsApi {
	private ApiClient apiClient;

	public RelationsApi() {
		this(Configuration.getDefaultApiClient());
	}

	public RelationsApi(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	/**
	 * Build call for apiV3RelationsGet
	 * 
	 * @param filters                 JSON specifying filter conditions. Accepts the
	 *                                same format as returned by the
	 *                                [queries](#queries) endpoint. Valid fields to
	 *                                filter by are: + id - ID of relation + from -
	 *                                ID of work package from which the filtered
	 *                                relations emanates. + to - ID of work package
	 *                                to which this related points. + involved - ID
	 *                                of either the &#x60;from&#x60; or the
	 *                                &#x60;to&#x60; work package. + type - The type
	 *                                of relation to filter by, e.g.
	 *                                \&quot;follows\&quot;. (optional)
	 * @param sortBy                  JSON specifying sort criteria. Accepts the
	 *                                same format as returned by the
	 *                                [queries](#queries) endpoint. (optional)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3RelationsGetCall(String filters, String sortBy,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/relations";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		if (filters != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("filters", filters));
		if (sortBy != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3RelationsGetValidateBeforeCall(String filters, String sortBy,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = apiV3RelationsGetCall(filters, sortBy, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * List Relations Lists all relations according to the given (optional,
	 * logically conjunctive) filters and ordered by ID. The response only includes
	 * relations between work packages which the user is allowed to see.
	 * 
	 * @param filters JSON specifying filter conditions. Accepts the same format as
	 *                returned by the [queries](#queries) endpoint. Valid fields to
	 *                filter by are: + id - ID of relation + from - ID of work
	 *                package from which the filtered relations emanates. + to - ID
	 *                of work package to which this related points. + involved - ID
	 *                of either the &#x60;from&#x60; or the &#x60;to&#x60; work
	 *                package. + type - The type of relation to filter by, e.g.
	 *                \&quot;follows\&quot;. (optional)
	 * @param sortBy  JSON specifying sort criteria. Accepts the same format as
	 *                returned by the [queries](#queries) endpoint. (optional)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3RelationsGet(String filters, String sortBy) throws ApiException {
		apiV3RelationsGetWithHttpInfo(filters, sortBy);
	}

	/**
	 * List Relations Lists all relations according to the given (optional,
	 * logically conjunctive) filters and ordered by ID. The response only includes
	 * relations between work packages which the user is allowed to see.
	 * 
	 * @param filters JSON specifying filter conditions. Accepts the same format as
	 *                returned by the [queries](#queries) endpoint. Valid fields to
	 *                filter by are: + id - ID of relation + from - ID of work
	 *                package from which the filtered relations emanates. + to - ID
	 *                of work package to which this related points. + involved - ID
	 *                of either the &#x60;from&#x60; or the &#x60;to&#x60; work
	 *                package. + type - The type of relation to filter by, e.g.
	 *                \&quot;follows\&quot;. (optional)
	 * @param sortBy  JSON specifying sort criteria. Accepts the same format as
	 *                returned by the [queries](#queries) endpoint. (optional)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3RelationsGetWithHttpInfo(String filters, String sortBy) throws ApiException {
		com.squareup.okhttp.Call call = apiV3RelationsGetValidateBeforeCall(filters, sortBy, null, null);
		return apiClient.execute(call);
	}

	/**
	 * List Relations (asynchronously) Lists all relations according to the given
	 * (optional, logically conjunctive) filters and ordered by ID. The response
	 * only includes relations between work packages which the user is allowed to
	 * see.
	 * 
	 * @param filters  JSON specifying filter conditions. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. Valid fields to
	 *                 filter by are: + id - ID of relation + from - ID of work
	 *                 package from which the filtered relations emanates. + to - ID
	 *                 of work package to which this related points. + involved - ID
	 *                 of either the &#x60;from&#x60; or the &#x60;to&#x60; work
	 *                 package. + type - The type of relation to filter by, e.g.
	 *                 \&quot;follows\&quot;. (optional)
	 * @param sortBy   JSON specifying sort criteria. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. (optional)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3RelationsGetAsync(String filters, String sortBy,
			final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3RelationsGetValidateBeforeCall(filters, sortBy, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3RelationsIdDelete
	 * 
	 * @param id                      Relation ID (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3RelationsIdDeleteCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/relations/{id}".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3RelationsIdDeleteValidateBeforeCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling apiV3RelationsIdDelete(Async)");
		}

		com.squareup.okhttp.Call call = apiV3RelationsIdDeleteCall(id, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Delete Relation Deletes the relation.
	 * 
	 * @param id Relation ID (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3RelationsIdDelete(Integer id) throws ApiException {
		apiV3RelationsIdDeleteWithHttpInfo(id);
	}

	/**
	 * Delete Relation Deletes the relation.
	 * 
	 * @param id Relation ID (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3RelationsIdDeleteWithHttpInfo(Integer id) throws ApiException {
		com.squareup.okhttp.Call call = apiV3RelationsIdDeleteValidateBeforeCall(id, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Delete Relation (asynchronously) Deletes the relation.
	 * 
	 * @param id       Relation ID (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3RelationsIdDeleteAsync(Integer id, final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3RelationsIdDeleteValidateBeforeCall(id, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3RelationsIdFormPost
	 * 
	 * @param id                      ID of the relation being modified (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3RelationsIdFormPostCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/relations/{id}/form".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3RelationsIdFormPostValidateBeforeCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling apiV3RelationsIdFormPost(Async)");
		}

		com.squareup.okhttp.Call call = apiV3RelationsIdFormPostCall(id, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Relation edit form
	 * 
	 * @param id ID of the relation being modified (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3RelationsIdFormPost(Integer id) throws ApiException {
		apiV3RelationsIdFormPostWithHttpInfo(id);
	}

	/**
	 * Relation edit form
	 * 
	 * @param id ID of the relation being modified (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3RelationsIdFormPostWithHttpInfo(Integer id) throws ApiException {
		com.squareup.okhttp.Call call = apiV3RelationsIdFormPostValidateBeforeCall(id, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Relation edit form (asynchronously)
	 * 
	 * @param id       ID of the relation being modified (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3RelationsIdFormPostAsync(Integer id, final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3RelationsIdFormPostValidateBeforeCall(id, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3RelationsIdGet
	 * 
	 * @param id                      Relation id (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3RelationsIdGetCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/relations/{id}".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3RelationsIdGetValidateBeforeCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling apiV3RelationsIdGet(Async)");
		}

		com.squareup.okhttp.Call call = apiV3RelationsIdGetCall(id, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * View Relation
	 * 
	 * @param id Relation id (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3RelationsIdGet(Integer id) throws ApiException {
		apiV3RelationsIdGetWithHttpInfo(id);
	}

	/**
	 * View Relation
	 * 
	 * @param id Relation id (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3RelationsIdGetWithHttpInfo(Integer id) throws ApiException {
		com.squareup.okhttp.Call call = apiV3RelationsIdGetValidateBeforeCall(id, null, null);
		return apiClient.execute(call);
	}

	/**
	 * View Relation (asynchronously)
	 * 
	 * @param id       Relation id (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3RelationsIdGetAsync(Integer id, final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3RelationsIdGetValidateBeforeCall(id, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3RelationsIdPatch
	 * 
	 * @param id                      Relation ID (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3RelationsIdPatchCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/relations/{id}".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3RelationsIdPatchValidateBeforeCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling apiV3RelationsIdPatch(Async)");
		}

		com.squareup.okhttp.Call call = apiV3RelationsIdPatchCall(id, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Edit Relation When calling this endpoint the client provides a single object,
	 * containing the properties and links that it wants to change, in the body. It
	 * is only allowed to provide properties or links supporting the **write**
	 * operation. Note that changing the &#x60;type&#x60; of a relation invariably
	 * also changes the respective &#x60;reverseType&#x60; as well as the
	 * \&quot;name\&quot; of it. The returned Relation object will reflect that
	 * change. For instance if you change a Relation&#x27;s &#x60;type&#x60; to
	 * \&quot;follows\&quot; then the &#x60;reverseType&#x60; will be changed to
	 * &#x60;precedes&#x60;.
	 * 
	 * @param id Relation ID (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3RelationsIdPatch(Integer id) throws ApiException {
		apiV3RelationsIdPatchWithHttpInfo(id);
	}

	/**
	 * Edit Relation When calling this endpoint the client provides a single object,
	 * containing the properties and links that it wants to change, in the body. It
	 * is only allowed to provide properties or links supporting the **write**
	 * operation. Note that changing the &#x60;type&#x60; of a relation invariably
	 * also changes the respective &#x60;reverseType&#x60; as well as the
	 * \&quot;name\&quot; of it. The returned Relation object will reflect that
	 * change. For instance if you change a Relation&#x27;s &#x60;type&#x60; to
	 * \&quot;follows\&quot; then the &#x60;reverseType&#x60; will be changed to
	 * &#x60;precedes&#x60;.
	 * 
	 * @param id Relation ID (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3RelationsIdPatchWithHttpInfo(Integer id) throws ApiException {
		com.squareup.okhttp.Call call = apiV3RelationsIdPatchValidateBeforeCall(id, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Edit Relation (asynchronously) When calling this endpoint the client provides
	 * a single object, containing the properties and links that it wants to change,
	 * in the body. It is only allowed to provide properties or links supporting the
	 * **write** operation. Note that changing the &#x60;type&#x60; of a relation
	 * invariably also changes the respective &#x60;reverseType&#x60; as well as the
	 * \&quot;name\&quot; of it. The returned Relation object will reflect that
	 * change. For instance if you change a Relation&#x27;s &#x60;type&#x60; to
	 * \&quot;follows\&quot; then the &#x60;reverseType&#x60; will be changed to
	 * &#x60;precedes&#x60;.
	 * 
	 * @param id       Relation ID (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3RelationsIdPatchAsync(Integer id, final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3RelationsIdPatchValidateBeforeCall(id, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3RelationsSchemaGet
	 * 
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3RelationsSchemaGetCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/relations/schema";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3RelationsSchemaGetValidateBeforeCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = apiV3RelationsSchemaGetCall(progressListener, progressRequestListener);
		return call;

	}

	/**
	 * View relation schema
	 * 
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3RelationsSchemaGet() throws ApiException {
		apiV3RelationsSchemaGetWithHttpInfo();
	}

	/**
	 * View relation schema
	 * 
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3RelationsSchemaGetWithHttpInfo() throws ApiException {
		com.squareup.okhttp.Call call = apiV3RelationsSchemaGetValidateBeforeCall(null, null);
		return apiClient.execute(call);
	}

	/**
	 * View relation schema (asynchronously)
	 * 
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3RelationsSchemaGetAsync(final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3RelationsSchemaGetValidateBeforeCall(progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3RelationsSchemaTypeGet
	 * 
	 * @param type                    Type of the schema (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3RelationsSchemaTypeGetCall(String type,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/relations/schema/{type}".replaceAll("\\{" + "type" + "\\}",
				apiClient.escapeString(type.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3RelationsSchemaTypeGetValidateBeforeCall(String type,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'type' is set
		if (type == null) {
			throw new ApiException(
					"Missing the required parameter 'type' when calling apiV3RelationsSchemaTypeGet(Async)");
		}

		com.squareup.okhttp.Call call = apiV3RelationsSchemaTypeGetCall(type, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * View relation schema for type
	 * 
	 * @param type Type of the schema (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3RelationsSchemaTypeGet(String type) throws ApiException {
		apiV3RelationsSchemaTypeGetWithHttpInfo(type);
	}

	/**
	 * View relation schema for type
	 * 
	 * @param type Type of the schema (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3RelationsSchemaTypeGetWithHttpInfo(String type) throws ApiException {
		com.squareup.okhttp.Call call = apiV3RelationsSchemaTypeGetValidateBeforeCall(type, null, null);
		return apiClient.execute(call);
	}

	/**
	 * View relation schema for type (asynchronously)
	 * 
	 * @param type     Type of the schema (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3RelationsSchemaTypeGetAsync(String type, final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3RelationsSchemaTypeGetValidateBeforeCall(type, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}
}
