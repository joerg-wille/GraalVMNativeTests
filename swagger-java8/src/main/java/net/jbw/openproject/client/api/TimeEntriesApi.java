/*
 * OpenProject API v3
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package net.jbw.openproject.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import net.jbw.openproject.client.invoker.ApiCallback;
import net.jbw.openproject.client.invoker.ApiClient;
import net.jbw.openproject.client.invoker.ApiException;
import net.jbw.openproject.client.invoker.ApiResponse;
import net.jbw.openproject.client.invoker.Configuration;
import net.jbw.openproject.client.invoker.Pair;
import net.jbw.openproject.client.invoker.ProgressRequestBody;
import net.jbw.openproject.client.invoker.ProgressResponseBody;
import net.jbw.openproject.client.model.TimeEntries;
import net.jbw.openproject.client.model.TimeEntry;
import net.jbw.openproject.client.model.TimeEntryPost;

public class TimeEntriesApi {
	private ApiClient apiClient;

	public TimeEntriesApi() {
		this(Configuration.getDefaultApiClient());
	}

	public TimeEntriesApi(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	/**
	 * Build call for apiV3TimeEntriesGet
	 * 
	 * @param offset                  Page number inside the requested collection.
	 *                                (optional)
	 * @param pageSize                Number of elements to display per page.
	 *                                (optional)
	 * @param filters                 JSON specifying filter conditions. Accepts the
	 *                                same format as returned by the
	 *                                [queries](#queries) endpoint. Currently
	 *                                supported filters are: + work_package: Filter
	 *                                time entries by work package + project: Filter
	 *                                time entries by project + user: Filter time
	 *                                entries by users (optional)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3TimeEntriesGetCall(Integer offset, Integer pageSize, String filters,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/time_entries";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		if (offset != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
		if (pageSize != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
		if (filters != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("filters", filters));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3TimeEntriesGetValidateBeforeCall(Integer offset, Integer pageSize,
			String filters, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = apiV3TimeEntriesGetCall(offset, pageSize, filters, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * List Time entries Lists time entries. The time entries returned depend on the
	 * filters provided and also on the permission of the requesting user.
	 * 
	 * @param offset   Page number inside the requested collection. (optional)
	 * @param pageSize Number of elements to display per page. (optional)
	 * @param filters  JSON specifying filter conditions. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. Currently
	 *                 supported filters are: + work_package: Filter time entries by
	 *                 work package + project: Filter time entries by project +
	 *                 user: Filter time entries by users (optional)
	 * @return TimeEntries
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public TimeEntries apiV3TimeEntriesGet(Integer offset, Integer pageSize, String filters) throws ApiException {
		ApiResponse<TimeEntries> resp = apiV3TimeEntriesGetWithHttpInfo(offset, pageSize, filters);
		return resp.getData();
	}

	/**
	 * List Time entries Lists time entries. The time entries returned depend on the
	 * filters provided and also on the permission of the requesting user.
	 * 
	 * @param offset   Page number inside the requested collection. (optional)
	 * @param pageSize Number of elements to display per page. (optional)
	 * @param filters  JSON specifying filter conditions. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. Currently
	 *                 supported filters are: + work_package: Filter time entries by
	 *                 work package + project: Filter time entries by project +
	 *                 user: Filter time entries by users (optional)
	 * @return ApiResponse&lt;TimeEntries&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<TimeEntries> apiV3TimeEntriesGetWithHttpInfo(Integer offset, Integer pageSize, String filters)
			throws ApiException {
		com.squareup.okhttp.Call call = apiV3TimeEntriesGetValidateBeforeCall(offset, pageSize, filters, null, null);
		Type localVarReturnType = new TypeToken<TimeEntries>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * List Time entries (asynchronously) Lists time entries. The time entries
	 * returned depend on the filters provided and also on the permission of the
	 * requesting user.
	 * 
	 * @param offset   Page number inside the requested collection. (optional)
	 * @param pageSize Number of elements to display per page. (optional)
	 * @param filters  JSON specifying filter conditions. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. Currently
	 *                 supported filters are: + work_package: Filter time entries by
	 *                 work package + project: Filter time entries by project +
	 *                 user: Filter time entries by users (optional)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3TimeEntriesGetAsync(Integer offset, Integer pageSize, String filters,
			final ApiCallback<TimeEntries> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3TimeEntriesGetValidateBeforeCall(offset, pageSize, filters,
				progressListener, progressRequestListener);
		Type localVarReturnType = new TypeToken<TimeEntries>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for apiV3TimeEntriesIdGet
	 * 
	 * @param id                      time entry id (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3TimeEntriesIdGetCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/time_entries/{id}".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3TimeEntriesIdGetValidateBeforeCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling apiV3TimeEntriesIdGet(Async)");
		}

		com.squareup.okhttp.Call call = apiV3TimeEntriesIdGetCall(id, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * View time entry
	 * 
	 * @param id time entry id (required)
	 * @return TimeEntry
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public TimeEntry apiV3TimeEntriesIdGet(Integer id) throws ApiException {
		ApiResponse<TimeEntry> resp = apiV3TimeEntriesIdGetWithHttpInfo(id);
		return resp.getData();
	}

	/**
	 * View time entry
	 * 
	 * @param id time entry id (required)
	 * @return ApiResponse&lt;TimeEntry&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<TimeEntry> apiV3TimeEntriesIdGetWithHttpInfo(Integer id) throws ApiException {
		com.squareup.okhttp.Call call = apiV3TimeEntriesIdGetValidateBeforeCall(id, null, null);
		Type localVarReturnType = new TypeToken<TimeEntry>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * View time entry (asynchronously)
	 * 
	 * @param id       time entry id (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3TimeEntriesIdGetAsync(Integer id, final ApiCallback<TimeEntry> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3TimeEntriesIdGetValidateBeforeCall(id, progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<TimeEntry>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for apiV3TimeEntriesPost
	 * 
	 * @param body                    Time Entry to add (a project, activity and
	 *                                workPackage link is requried) (required)
	 * @param offset                  Page number inside the requested collection.
	 *                                (optional)
	 * @param pageSize                Number of elements to display per page.
	 *                                (optional)
	 * @param filters                 JSON specifying filter conditions. Accepts the
	 *                                same format as returned by the
	 *                                [queries](#queries) endpoint. (optional)
	 * @param sortBy                  JSON specifying sort criteria. Accepts the
	 *                                same format as returned by the
	 *                                [queries](#queries) endpoint. (optional)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3TimeEntriesPostCall(TimeEntryPost body, Integer offset, Integer pageSize,
			String filters, String sortBy, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/api/v3/time_entries";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		if (offset != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
		if (pageSize != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
		if (filters != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("filters", filters));
		if (sortBy != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "*/*" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3TimeEntriesPostValidateBeforeCall(TimeEntryPost body, Integer offset,
			Integer pageSize, String filters, String sortBy,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'body' is set
		if (body == null) {
			throw new ApiException("Missing the required parameter 'body' when calling apiV3TimeEntriesPost(Async)");
		}

		com.squareup.okhttp.Call call = apiV3TimeEntriesPostCall(body, offset, pageSize, filters, sortBy,
				progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Create time entry Creates a new time entry applying the attributes provided
	 * in the body. Please note that while there is a fixed set of attributes,
	 * custom fields can extend a time entries’ attributes and are accepted by the
	 * endpoint.
	 * 
	 * @param body     Time Entry to add (a project, activity and workPackage link
	 *                 is requried) (required)
	 * @param offset   Page number inside the requested collection. (optional)
	 * @param pageSize Number of elements to display per page. (optional)
	 * @param filters  JSON specifying filter conditions. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. (optional)
	 * @param sortBy   JSON specifying sort criteria. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. (optional)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3TimeEntriesPost(TimeEntryPost body, Integer offset, Integer pageSize, String filters,
			String sortBy) throws ApiException {
		apiV3TimeEntriesPostWithHttpInfo(body, offset, pageSize, filters, sortBy);
	}

	/**
	 * Create time entry Creates a new time entry applying the attributes provided
	 * in the body. Please note that while there is a fixed set of attributes,
	 * custom fields can extend a time entries’ attributes and are accepted by the
	 * endpoint.
	 * 
	 * @param body     Time Entry to add (a project, activity and workPackage link
	 *                 is requried) (required)
	 * @param offset   Page number inside the requested collection. (optional)
	 * @param pageSize Number of elements to display per page. (optional)
	 * @param filters  JSON specifying filter conditions. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. (optional)
	 * @param sortBy   JSON specifying sort criteria. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. (optional)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3TimeEntriesPostWithHttpInfo(TimeEntryPost body, Integer offset, Integer pageSize,
			String filters, String sortBy) throws ApiException {
		com.squareup.okhttp.Call call = apiV3TimeEntriesPostValidateBeforeCall(body, offset, pageSize, filters, sortBy,
				null, null);
		return apiClient.execute(call);
	}

	/**
	 * Create time entry (asynchronously) Creates a new time entry applying the
	 * attributes provided in the body. Please note that while there is a fixed set
	 * of attributes, custom fields can extend a time entries’ attributes and are
	 * accepted by the endpoint.
	 * 
	 * @param body     Time Entry to add (a project, activity and workPackage link
	 *                 is requried) (required)
	 * @param offset   Page number inside the requested collection. (optional)
	 * @param pageSize Number of elements to display per page. (optional)
	 * @param filters  JSON specifying filter conditions. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. (optional)
	 * @param sortBy   JSON specifying sort criteria. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. (optional)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3TimeEntriesPostAsync(TimeEntryPost body, Integer offset, Integer pageSize,
			String filters, String sortBy, final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3TimeEntriesPostValidateBeforeCall(body, offset, pageSize, filters, sortBy,
				progressListener, progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}
}
