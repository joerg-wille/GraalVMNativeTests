/*
 * OpenProject API v3
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package net.jbw.openproject.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import net.jbw.openproject.client.invoker.ApiCallback;
import net.jbw.openproject.client.invoker.ApiClient;
import net.jbw.openproject.client.invoker.ApiException;
import net.jbw.openproject.client.invoker.ApiResponse;
import net.jbw.openproject.client.invoker.Configuration;
import net.jbw.openproject.client.invoker.Pair;
import net.jbw.openproject.client.invoker.ProgressRequestBody;
import net.jbw.openproject.client.invoker.ProgressResponseBody;
import net.jbw.openproject.client.model.TimeEntriesActivity;

public class TimeEntryActivitiesApi {
	private ApiClient apiClient;

	public TimeEntryActivitiesApi() {
		this(Configuration.getDefaultApiClient());
	}

	public TimeEntryActivitiesApi(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	/**
	 * Build call for apiV3TimeEntriesActivitiesIdGet
	 * 
	 * @param id                      time entries activity id (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3TimeEntriesActivitiesIdGetCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/time_entries/activities/{id}".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3TimeEntriesActivitiesIdGetValidateBeforeCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException(
					"Missing the required parameter 'id' when calling apiV3TimeEntriesActivitiesIdGet(Async)");
		}

		com.squareup.okhttp.Call call = apiV3TimeEntriesActivitiesIdGetCall(id, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * View time entries activity
	 * 
	 * @param id time entries activity id (required)
	 * @return TimeEntriesActivity
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public TimeEntriesActivity apiV3TimeEntriesActivitiesIdGet(Integer id) throws ApiException {
		ApiResponse<TimeEntriesActivity> resp = apiV3TimeEntriesActivitiesIdGetWithHttpInfo(id);
		return resp.getData();
	}

	/**
	 * View time entries activity
	 * 
	 * @param id time entries activity id (required)
	 * @return ApiResponse&lt;TimeEntriesActivity&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<TimeEntriesActivity> apiV3TimeEntriesActivitiesIdGetWithHttpInfo(Integer id)
			throws ApiException {
		com.squareup.okhttp.Call call = apiV3TimeEntriesActivitiesIdGetValidateBeforeCall(id, null, null);
		Type localVarReturnType = new TypeToken<TimeEntriesActivity>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * View time entries activity (asynchronously)
	 * 
	 * @param id       time entries activity id (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3TimeEntriesActivitiesIdGetAsync(Integer id,
			final ApiCallback<TimeEntriesActivity> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3TimeEntriesActivitiesIdGetValidateBeforeCall(id, progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<TimeEntriesActivity>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}
}
