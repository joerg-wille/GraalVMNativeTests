/*
 * OpenProject API v3
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package net.jbw.openproject.client.api;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.jbw.openproject.client.invoker.ApiCallback;
import net.jbw.openproject.client.invoker.ApiClient;
import net.jbw.openproject.client.invoker.ApiException;
import net.jbw.openproject.client.invoker.ApiResponse;
import net.jbw.openproject.client.invoker.Configuration;
import net.jbw.openproject.client.invoker.Pair;
import net.jbw.openproject.client.invoker.ProgressRequestBody;
import net.jbw.openproject.client.invoker.ProgressResponseBody;

public class QueriesApi {
	private ApiClient apiClient;

	public QueriesApi() {
		this(Configuration.getDefaultApiClient());
	}

	public QueriesApi(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	/**
	 * Build call for apiV3ProjectsIdQueriesDefaultGet
	 * 
	 * @param id                      Id of the project the default query is
	 *                                requested for (required)
	 * @param filters                 JSON specifying filter conditions. The filters
	 *                                provided as parameters are not applied to the
	 *                                query but are instead used to override the
	 *                                query&#x27;s persisted filters. All filters
	 *                                also accepted by the work packages endpoint
	 *                                are accepted. (optional)
	 * @param offset                  Page number inside the queries&#x27; result
	 *                                collection of work packages. (optional)
	 * @param pageSize                Number of elements to display per page for the
	 *                                queries&#x27; result collection of work
	 *                                packages. (optional)
	 * @param sortBy                  JSON specifying sort criteria. The sort
	 *                                criteria is applied to the querie&#x27;s
	 *                                result collection of work packages overriding
	 *                                the query&#x27;s persisted sort criteria.
	 *                                (optional)
	 * @param groupBy                 The column to group by. The grouping criteria
	 *                                is applied to the to the querie&#x27;s result
	 *                                collection of work packages overriding the
	 *                                query&#x27;s persisted group criteria.
	 *                                (optional)
	 * @param showSums                Indicates whether properties should be summed
	 *                                up if they support it. The showSums parameter
	 *                                is applied to the to the querie&#x27;s result
	 *                                collection of work packages overriding the
	 *                                query&#x27;s persisted sums property.
	 *                                (optional)
	 * @param timelineVisible         Indicates whether the timeline should be
	 *                                shown. (optional)
	 * @param showHierarchies         Indicates whether the hierarchy mode should be
	 *                                enabled. (optional)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3ProjectsIdQueriesDefaultGetCall(Integer id, String filters, Integer offset,
			Integer pageSize, String sortBy, String groupBy, Boolean showSums, Boolean timelineVisible,
			Boolean showHierarchies, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/projects/{id}/queries/default".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		if (filters != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("filters", filters));
		if (offset != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
		if (pageSize != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
		if (sortBy != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
		if (groupBy != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("groupBy", groupBy));
		if (showSums != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("showSums", showSums));
		if (timelineVisible != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("timelineVisible", timelineVisible));
		if (showHierarchies != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("showHierarchies", showHierarchies));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3ProjectsIdQueriesDefaultGetValidateBeforeCall(Integer id, String filters,
			Integer offset, Integer pageSize, String sortBy, String groupBy, Boolean showSums, Boolean timelineVisible,
			Boolean showHierarchies, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException(
					"Missing the required parameter 'id' when calling apiV3ProjectsIdQueriesDefaultGet(Async)");
		}

		com.squareup.okhttp.Call call = apiV3ProjectsIdQueriesDefaultGetCall(id, filters, offset, pageSize, sortBy,
				groupBy, showSums, timelineVisible, showHierarchies, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * View default query for project Same as [viewing an existing, persisted
	 * Query](#queries-query-get) in its response, this resource returns an
	 * unpersisted query and by that allows to get the default query configuration.
	 * The client may also provide additional parameters which will modify the
	 * default query. The query will already be scoped for the project.
	 * 
	 * @param id              Id of the project the default query is requested for
	 *                        (required)
	 * @param filters         JSON specifying filter conditions. The filters
	 *                        provided as parameters are not applied to the query
	 *                        but are instead used to override the query&#x27;s
	 *                        persisted filters. All filters also accepted by the
	 *                        work packages endpoint are accepted. (optional)
	 * @param offset          Page number inside the queries&#x27; result collection
	 *                        of work packages. (optional)
	 * @param pageSize        Number of elements to display per page for the
	 *                        queries&#x27; result collection of work packages.
	 *                        (optional)
	 * @param sortBy          JSON specifying sort criteria. The sort criteria is
	 *                        applied to the querie&#x27;s result collection of work
	 *                        packages overriding the query&#x27;s persisted sort
	 *                        criteria. (optional)
	 * @param groupBy         The column to group by. The grouping criteria is
	 *                        applied to the to the querie&#x27;s result collection
	 *                        of work packages overriding the query&#x27;s persisted
	 *                        group criteria. (optional)
	 * @param showSums        Indicates whether properties should be summed up if
	 *                        they support it. The showSums parameter is applied to
	 *                        the to the querie&#x27;s result collection of work
	 *                        packages overriding the query&#x27;s persisted sums
	 *                        property. (optional)
	 * @param timelineVisible Indicates whether the timeline should be shown.
	 *                        (optional)
	 * @param showHierarchies Indicates whether the hierarchy mode should be
	 *                        enabled. (optional)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3ProjectsIdQueriesDefaultGet(Integer id, String filters, Integer offset, Integer pageSize,
			String sortBy, String groupBy, Boolean showSums, Boolean timelineVisible, Boolean showHierarchies)
			throws ApiException {
		apiV3ProjectsIdQueriesDefaultGetWithHttpInfo(id, filters, offset, pageSize, sortBy, groupBy, showSums,
				timelineVisible, showHierarchies);
	}

	/**
	 * View default query for project Same as [viewing an existing, persisted
	 * Query](#queries-query-get) in its response, this resource returns an
	 * unpersisted query and by that allows to get the default query configuration.
	 * The client may also provide additional parameters which will modify the
	 * default query. The query will already be scoped for the project.
	 * 
	 * @param id              Id of the project the default query is requested for
	 *                        (required)
	 * @param filters         JSON specifying filter conditions. The filters
	 *                        provided as parameters are not applied to the query
	 *                        but are instead used to override the query&#x27;s
	 *                        persisted filters. All filters also accepted by the
	 *                        work packages endpoint are accepted. (optional)
	 * @param offset          Page number inside the queries&#x27; result collection
	 *                        of work packages. (optional)
	 * @param pageSize        Number of elements to display per page for the
	 *                        queries&#x27; result collection of work packages.
	 *                        (optional)
	 * @param sortBy          JSON specifying sort criteria. The sort criteria is
	 *                        applied to the querie&#x27;s result collection of work
	 *                        packages overriding the query&#x27;s persisted sort
	 *                        criteria. (optional)
	 * @param groupBy         The column to group by. The grouping criteria is
	 *                        applied to the to the querie&#x27;s result collection
	 *                        of work packages overriding the query&#x27;s persisted
	 *                        group criteria. (optional)
	 * @param showSums        Indicates whether properties should be summed up if
	 *                        they support it. The showSums parameter is applied to
	 *                        the to the querie&#x27;s result collection of work
	 *                        packages overriding the query&#x27;s persisted sums
	 *                        property. (optional)
	 * @param timelineVisible Indicates whether the timeline should be shown.
	 *                        (optional)
	 * @param showHierarchies Indicates whether the hierarchy mode should be
	 *                        enabled. (optional)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3ProjectsIdQueriesDefaultGetWithHttpInfo(Integer id, String filters, Integer offset,
			Integer pageSize, String sortBy, String groupBy, Boolean showSums, Boolean timelineVisible,
			Boolean showHierarchies) throws ApiException {
		com.squareup.okhttp.Call call = apiV3ProjectsIdQueriesDefaultGetValidateBeforeCall(id, filters, offset,
				pageSize, sortBy, groupBy, showSums, timelineVisible, showHierarchies, null, null);
		return apiClient.execute(call);
	}

	/**
	 * View default query for project (asynchronously) Same as [viewing an existing,
	 * persisted Query](#queries-query-get) in its response, this resource returns
	 * an unpersisted query and by that allows to get the default query
	 * configuration. The client may also provide additional parameters which will
	 * modify the default query. The query will already be scoped for the project.
	 * 
	 * @param id              Id of the project the default query is requested for
	 *                        (required)
	 * @param filters         JSON specifying filter conditions. The filters
	 *                        provided as parameters are not applied to the query
	 *                        but are instead used to override the query&#x27;s
	 *                        persisted filters. All filters also accepted by the
	 *                        work packages endpoint are accepted. (optional)
	 * @param offset          Page number inside the queries&#x27; result collection
	 *                        of work packages. (optional)
	 * @param pageSize        Number of elements to display per page for the
	 *                        queries&#x27; result collection of work packages.
	 *                        (optional)
	 * @param sortBy          JSON specifying sort criteria. The sort criteria is
	 *                        applied to the querie&#x27;s result collection of work
	 *                        packages overriding the query&#x27;s persisted sort
	 *                        criteria. (optional)
	 * @param groupBy         The column to group by. The grouping criteria is
	 *                        applied to the to the querie&#x27;s result collection
	 *                        of work packages overriding the query&#x27;s persisted
	 *                        group criteria. (optional)
	 * @param showSums        Indicates whether properties should be summed up if
	 *                        they support it. The showSums parameter is applied to
	 *                        the to the querie&#x27;s result collection of work
	 *                        packages overriding the query&#x27;s persisted sums
	 *                        property. (optional)
	 * @param timelineVisible Indicates whether the timeline should be shown.
	 *                        (optional)
	 * @param showHierarchies Indicates whether the hierarchy mode should be
	 *                        enabled. (optional)
	 * @param callback        The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3ProjectsIdQueriesDefaultGetAsync(Integer id, String filters, Integer offset,
			Integer pageSize, String sortBy, String groupBy, Boolean showSums, Boolean timelineVisible,
			Boolean showHierarchies, final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3ProjectsIdQueriesDefaultGetValidateBeforeCall(id, filters, offset,
				pageSize, sortBy, groupBy, showSums, timelineVisible, showHierarchies, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3ProjectsIdQueriesSchemaGet
	 * 
	 * @param id                      ID of project to return (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3ProjectsIdQueriesSchemaGetCall(Long id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/projects/{id}/queries/schema".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3ProjectsIdQueriesSchemaGetValidateBeforeCall(Long id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException(
					"Missing the required parameter 'id' when calling apiV3ProjectsIdQueriesSchemaGet(Async)");
		}

		com.squareup.okhttp.Call call = apiV3ProjectsIdQueriesSchemaGetCall(id, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * View schema for project queries Retrieve the schema for project queries.
	 * 
	 * @param id ID of project to return (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3ProjectsIdQueriesSchemaGet(Long id) throws ApiException {
		apiV3ProjectsIdQueriesSchemaGetWithHttpInfo(id);
	}

	/**
	 * View schema for project queries Retrieve the schema for project queries.
	 * 
	 * @param id ID of project to return (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3ProjectsIdQueriesSchemaGetWithHttpInfo(Long id) throws ApiException {
		com.squareup.okhttp.Call call = apiV3ProjectsIdQueriesSchemaGetValidateBeforeCall(id, null, null);
		return apiClient.execute(call);
	}

	/**
	 * View schema for project queries (asynchronously) Retrieve the schema for
	 * project queries.
	 * 
	 * @param id       ID of project to return (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3ProjectsIdQueriesSchemaGetAsync(Long id, final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3ProjectsIdQueriesSchemaGetValidateBeforeCall(id, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3QueriesAvailableProjectsGet
	 * 
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3QueriesAvailableProjectsGetCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/queries/available_projects";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3QueriesAvailableProjectsGetValidateBeforeCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = apiV3QueriesAvailableProjectsGetCall(progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Available projects Gets a list of projects that are available as projects a
	 * query can be assigned to.
	 * 
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3QueriesAvailableProjectsGet() throws ApiException {
		apiV3QueriesAvailableProjectsGetWithHttpInfo();
	}

	/**
	 * Available projects Gets a list of projects that are available as projects a
	 * query can be assigned to.
	 * 
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3QueriesAvailableProjectsGetWithHttpInfo() throws ApiException {
		com.squareup.okhttp.Call call = apiV3QueriesAvailableProjectsGetValidateBeforeCall(null, null);
		return apiClient.execute(call);
	}

	/**
	 * Available projects (asynchronously) Gets a list of projects that are
	 * available as projects a query can be assigned to.
	 * 
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3QueriesAvailableProjectsGetAsync(final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3QueriesAvailableProjectsGetValidateBeforeCall(progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3QueriesDefaultGet
	 * 
	 * @param filters                 JSON specifying filter conditions. The filters
	 *                                provided as parameters are not applied to the
	 *                                query but are instead used to override the
	 *                                query&#x27;s persisted filters. All filters
	 *                                also accepted by the work packages endpoint
	 *                                are accepted. (optional)
	 * @param offset                  Page number inside the queries&#x27; result
	 *                                collection of work packages. (optional)
	 * @param pageSize                Number of elements to display per page for the
	 *                                queries&#x27; result collection of work
	 *                                packages. (optional)
	 * @param sortBy                  JSON specifying sort criteria. The sort
	 *                                criteria is applied to the querie&#x27;s
	 *                                result collection of work packages overriding
	 *                                the query&#x27;s persisted sort criteria.
	 *                                (optional)
	 * @param groupBy                 The column to group by. The grouping criteria
	 *                                is applied to the to the querie&#x27;s result
	 *                                collection of work packages overriding the
	 *                                query&#x27;s persisted group criteria.
	 *                                (optional)
	 * @param showSums                Indicates whether properties should be summed
	 *                                up if they support it. The showSums parameter
	 *                                is applied to the to the querie&#x27;s result
	 *                                collection of work packages overriding the
	 *                                query&#x27;s persisted sums property.
	 *                                (optional)
	 * @param timelineVisible         Indicates whether the timeline should be
	 *                                shown. (optional)
	 * @param timelineZoomLevel       Indicates in what zoom level the timeline
	 *                                should be shown. Valid values are
	 *                                &#x60;days&#x60;, &#x60;weeks&#x60;,
	 *                                &#x60;months&#x60;, &#x60;quarters&#x60;, and
	 *                                &#x60;years&#x60;. (optional)
	 * @param showHierarchies         Indicates whether the hierarchy mode should be
	 *                                enabled. (optional)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3QueriesDefaultGetCall(String filters, Integer offset, Integer pageSize,
			String sortBy, String groupBy, Boolean showSums, Boolean timelineVisible, String timelineZoomLevel,
			Boolean showHierarchies, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/queries/default";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		if (filters != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("filters", filters));
		if (offset != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
		if (pageSize != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
		if (sortBy != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
		if (groupBy != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("groupBy", groupBy));
		if (showSums != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("showSums", showSums));
		if (timelineVisible != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("timelineVisible", timelineVisible));
		if (timelineZoomLevel != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("timelineZoomLevel", timelineZoomLevel));
		if (showHierarchies != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("showHierarchies", showHierarchies));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3QueriesDefaultGetValidateBeforeCall(String filters, Integer offset,
			Integer pageSize, String sortBy, String groupBy, Boolean showSums, Boolean timelineVisible,
			String timelineZoomLevel, Boolean showHierarchies,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = apiV3QueriesDefaultGetCall(filters, offset, pageSize, sortBy, groupBy, showSums,
				timelineVisible, timelineZoomLevel, showHierarchies, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * View default query Same as [viewing an existing, persisted
	 * Query](#queries-query-get) in its response, this resource returns an
	 * unpersisted query and by that allows to get the default query configuration.
	 * The client may also provide additional parameters which will modify the
	 * default query.
	 * 
	 * @param filters           JSON specifying filter conditions. The filters
	 *                          provided as parameters are not applied to the query
	 *                          but are instead used to override the query&#x27;s
	 *                          persisted filters. All filters also accepted by the
	 *                          work packages endpoint are accepted. (optional)
	 * @param offset            Page number inside the queries&#x27; result
	 *                          collection of work packages. (optional)
	 * @param pageSize          Number of elements to display per page for the
	 *                          queries&#x27; result collection of work packages.
	 *                          (optional)
	 * @param sortBy            JSON specifying sort criteria. The sort criteria is
	 *                          applied to the querie&#x27;s result collection of
	 *                          work packages overriding the query&#x27;s persisted
	 *                          sort criteria. (optional)
	 * @param groupBy           The column to group by. The grouping criteria is
	 *                          applied to the to the querie&#x27;s result
	 *                          collection of work packages overriding the
	 *                          query&#x27;s persisted group criteria. (optional)
	 * @param showSums          Indicates whether properties should be summed up if
	 *                          they support it. The showSums parameter is applied
	 *                          to the to the querie&#x27;s result collection of
	 *                          work packages overriding the query&#x27;s persisted
	 *                          sums property. (optional)
	 * @param timelineVisible   Indicates whether the timeline should be shown.
	 *                          (optional)
	 * @param timelineZoomLevel Indicates in what zoom level the timeline should be
	 *                          shown. Valid values are &#x60;days&#x60;,
	 *                          &#x60;weeks&#x60;, &#x60;months&#x60;,
	 *                          &#x60;quarters&#x60;, and &#x60;years&#x60;.
	 *                          (optional)
	 * @param showHierarchies   Indicates whether the hierarchy mode should be
	 *                          enabled. (optional)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3QueriesDefaultGet(String filters, Integer offset, Integer pageSize, String sortBy, String groupBy,
			Boolean showSums, Boolean timelineVisible, String timelineZoomLevel, Boolean showHierarchies)
			throws ApiException {
		apiV3QueriesDefaultGetWithHttpInfo(filters, offset, pageSize, sortBy, groupBy, showSums, timelineVisible,
				timelineZoomLevel, showHierarchies);
	}

	/**
	 * View default query Same as [viewing an existing, persisted
	 * Query](#queries-query-get) in its response, this resource returns an
	 * unpersisted query and by that allows to get the default query configuration.
	 * The client may also provide additional parameters which will modify the
	 * default query.
	 * 
	 * @param filters           JSON specifying filter conditions. The filters
	 *                          provided as parameters are not applied to the query
	 *                          but are instead used to override the query&#x27;s
	 *                          persisted filters. All filters also accepted by the
	 *                          work packages endpoint are accepted. (optional)
	 * @param offset            Page number inside the queries&#x27; result
	 *                          collection of work packages. (optional)
	 * @param pageSize          Number of elements to display per page for the
	 *                          queries&#x27; result collection of work packages.
	 *                          (optional)
	 * @param sortBy            JSON specifying sort criteria. The sort criteria is
	 *                          applied to the querie&#x27;s result collection of
	 *                          work packages overriding the query&#x27;s persisted
	 *                          sort criteria. (optional)
	 * @param groupBy           The column to group by. The grouping criteria is
	 *                          applied to the to the querie&#x27;s result
	 *                          collection of work packages overriding the
	 *                          query&#x27;s persisted group criteria. (optional)
	 * @param showSums          Indicates whether properties should be summed up if
	 *                          they support it. The showSums parameter is applied
	 *                          to the to the querie&#x27;s result collection of
	 *                          work packages overriding the query&#x27;s persisted
	 *                          sums property. (optional)
	 * @param timelineVisible   Indicates whether the timeline should be shown.
	 *                          (optional)
	 * @param timelineZoomLevel Indicates in what zoom level the timeline should be
	 *                          shown. Valid values are &#x60;days&#x60;,
	 *                          &#x60;weeks&#x60;, &#x60;months&#x60;,
	 *                          &#x60;quarters&#x60;, and &#x60;years&#x60;.
	 *                          (optional)
	 * @param showHierarchies   Indicates whether the hierarchy mode should be
	 *                          enabled. (optional)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3QueriesDefaultGetWithHttpInfo(String filters, Integer offset, Integer pageSize,
			String sortBy, String groupBy, Boolean showSums, Boolean timelineVisible, String timelineZoomLevel,
			Boolean showHierarchies) throws ApiException {
		com.squareup.okhttp.Call call = apiV3QueriesDefaultGetValidateBeforeCall(filters, offset, pageSize, sortBy,
				groupBy, showSums, timelineVisible, timelineZoomLevel, showHierarchies, null, null);
		return apiClient.execute(call);
	}

	/**
	 * View default query (asynchronously) Same as [viewing an existing, persisted
	 * Query](#queries-query-get) in its response, this resource returns an
	 * unpersisted query and by that allows to get the default query configuration.
	 * The client may also provide additional parameters which will modify the
	 * default query.
	 * 
	 * @param filters           JSON specifying filter conditions. The filters
	 *                          provided as parameters are not applied to the query
	 *                          but are instead used to override the query&#x27;s
	 *                          persisted filters. All filters also accepted by the
	 *                          work packages endpoint are accepted. (optional)
	 * @param offset            Page number inside the queries&#x27; result
	 *                          collection of work packages. (optional)
	 * @param pageSize          Number of elements to display per page for the
	 *                          queries&#x27; result collection of work packages.
	 *                          (optional)
	 * @param sortBy            JSON specifying sort criteria. The sort criteria is
	 *                          applied to the querie&#x27;s result collection of
	 *                          work packages overriding the query&#x27;s persisted
	 *                          sort criteria. (optional)
	 * @param groupBy           The column to group by. The grouping criteria is
	 *                          applied to the to the querie&#x27;s result
	 *                          collection of work packages overriding the
	 *                          query&#x27;s persisted group criteria. (optional)
	 * @param showSums          Indicates whether properties should be summed up if
	 *                          they support it. The showSums parameter is applied
	 *                          to the to the querie&#x27;s result collection of
	 *                          work packages overriding the query&#x27;s persisted
	 *                          sums property. (optional)
	 * @param timelineVisible   Indicates whether the timeline should be shown.
	 *                          (optional)
	 * @param timelineZoomLevel Indicates in what zoom level the timeline should be
	 *                          shown. Valid values are &#x60;days&#x60;,
	 *                          &#x60;weeks&#x60;, &#x60;months&#x60;,
	 *                          &#x60;quarters&#x60;, and &#x60;years&#x60;.
	 *                          (optional)
	 * @param showHierarchies   Indicates whether the hierarchy mode should be
	 *                          enabled. (optional)
	 * @param callback          The callback to be executed when the API call
	 *                          finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3QueriesDefaultGetAsync(String filters, Integer offset, Integer pageSize,
			String sortBy, String groupBy, Boolean showSums, Boolean timelineVisible, String timelineZoomLevel,
			Boolean showHierarchies, final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3QueriesDefaultGetValidateBeforeCall(filters, offset, pageSize, sortBy,
				groupBy, showSums, timelineVisible, timelineZoomLevel, showHierarchies, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3QueriesFormPost
	 * 
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3QueriesFormPostCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/queries/form";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3QueriesFormPostValidateBeforeCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = apiV3QueriesFormPostCall(progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Query Create Form
	 * 
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3QueriesFormPost() throws ApiException {
		apiV3QueriesFormPostWithHttpInfo();
	}

	/**
	 * Query Create Form
	 * 
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3QueriesFormPostWithHttpInfo() throws ApiException {
		com.squareup.okhttp.Call call = apiV3QueriesFormPostValidateBeforeCall(null, null);
		return apiClient.execute(call);
	}

	/**
	 * Query Create Form (asynchronously)
	 * 
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3QueriesFormPostAsync(final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3QueriesFormPostValidateBeforeCall(progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3QueriesGet
	 * 
	 * @param filters                 JSON specifying filter conditions. Accepts the
	 *                                same format as returned by the
	 *                                [queries](#queries) endpoint. Currently
	 *                                supported filters are: + project: filters
	 *                                queries by the project they are assigned to.
	 *                                If the project filter is passed with the
	 *                                &#x60;!*&#x60; (not any) operator, global
	 *                                queries are returned. (optional)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3QueriesGetCall(String filters,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/queries";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		if (filters != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("filters", filters));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3QueriesGetValidateBeforeCall(String filters,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = apiV3QueriesGetCall(filters, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * List queries Returns a collection of queries. The collection can be filtered
	 * via query parameters similar to how work packages are filtered. Please note
	 * however, that the filters are applied to the queries and not to the work
	 * packages the queries in turn might return.
	 * 
	 * @param filters JSON specifying filter conditions. Accepts the same format as
	 *                returned by the [queries](#queries) endpoint. Currently
	 *                supported filters are: + project: filters queries by the
	 *                project they are assigned to. If the project filter is passed
	 *                with the &#x60;!*&#x60; (not any) operator, global queries are
	 *                returned. (optional)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3QueriesGet(String filters) throws ApiException {
		apiV3QueriesGetWithHttpInfo(filters);
	}

	/**
	 * List queries Returns a collection of queries. The collection can be filtered
	 * via query parameters similar to how work packages are filtered. Please note
	 * however, that the filters are applied to the queries and not to the work
	 * packages the queries in turn might return.
	 * 
	 * @param filters JSON specifying filter conditions. Accepts the same format as
	 *                returned by the [queries](#queries) endpoint. Currently
	 *                supported filters are: + project: filters queries by the
	 *                project they are assigned to. If the project filter is passed
	 *                with the &#x60;!*&#x60; (not any) operator, global queries are
	 *                returned. (optional)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3QueriesGetWithHttpInfo(String filters) throws ApiException {
		com.squareup.okhttp.Call call = apiV3QueriesGetValidateBeforeCall(filters, null, null);
		return apiClient.execute(call);
	}

	/**
	 * List queries (asynchronously) Returns a collection of queries. The collection
	 * can be filtered via query parameters similar to how work packages are
	 * filtered. Please note however, that the filters are applied to the queries
	 * and not to the work packages the queries in turn might return.
	 * 
	 * @param filters  JSON specifying filter conditions. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. Currently
	 *                 supported filters are: + project: filters queries by the
	 *                 project they are assigned to. If the project filter is passed
	 *                 with the &#x60;!*&#x60; (not any) operator, global queries
	 *                 are returned. (optional)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3QueriesGetAsync(String filters, final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3QueriesGetValidateBeforeCall(filters, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3QueriesIdDelete
	 * 
	 * @param id                      Query id (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3QueriesIdDeleteCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/queries/{id}".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3QueriesIdDeleteValidateBeforeCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling apiV3QueriesIdDelete(Async)");
		}

		com.squareup.okhttp.Call call = apiV3QueriesIdDeleteCall(id, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Delete query Delete the query identified by the id parameter
	 * 
	 * @param id Query id (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3QueriesIdDelete(Integer id) throws ApiException {
		apiV3QueriesIdDeleteWithHttpInfo(id);
	}

	/**
	 * Delete query Delete the query identified by the id parameter
	 * 
	 * @param id Query id (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3QueriesIdDeleteWithHttpInfo(Integer id) throws ApiException {
		com.squareup.okhttp.Call call = apiV3QueriesIdDeleteValidateBeforeCall(id, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Delete query (asynchronously) Delete the query identified by the id parameter
	 * 
	 * @param id       Query id (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3QueriesIdDeleteAsync(Integer id, final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3QueriesIdDeleteValidateBeforeCall(id, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3QueriesIdGet
	 * 
	 * @param id                      Query id (required)
	 * @param filters                 JSON specifying filter conditions. The filters
	 *                                provided as parameters are not applied to the
	 *                                query but are instead used to override the
	 *                                query&#x27;s persisted filters. All filters
	 *                                also accepted by the work packages endpoint
	 *                                are accepted. (optional)
	 * @param offset                  Page number inside the queries&#x27; result
	 *                                collection of work packages. (optional)
	 * @param pageSize                Number of elements to display per page for the
	 *                                queries&#x27; result collection of work
	 *                                packages. (optional)
	 * @param sortBy                  JSON specifying sort criteria. The sort
	 *                                criteria is applied to the querie&#x27;s
	 *                                result collection of work packages overriding
	 *                                the query&#x27;s persisted sort criteria.
	 *                                (optional)
	 * @param groupBy                 The column to group by. The grouping criteria
	 *                                is applied to the to the querie&#x27;s result
	 *                                collection of work packages overriding the
	 *                                query&#x27;s persisted group criteria.
	 *                                (optional)
	 * @param showSums                Indicates whether properties should be summed
	 *                                up if they support it. The showSums parameter
	 *                                is applied to the to the querie&#x27;s result
	 *                                collection of work packages overriding the
	 *                                query&#x27;s persisted sums property.
	 *                                (optional)
	 * @param timelineVisible         Indicates whether the timeline should be
	 *                                shown. (optional)
	 * @param timelineLabels          Overridden labels in the timeline view
	 *                                (optional)
	 * @param showHierarchies         Indicates whether the hierarchy mode should be
	 *                                enabled. (optional)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3QueriesIdGetCall(Integer id, String filters, Integer offset, Integer pageSize,
			String sortBy, String groupBy, Boolean showSums, Boolean timelineVisible, String timelineLabels,
			Boolean showHierarchies, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/queries/{id}".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		if (filters != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("filters", filters));
		if (offset != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
		if (pageSize != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
		if (sortBy != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
		if (groupBy != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("groupBy", groupBy));
		if (showSums != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("showSums", showSums));
		if (timelineVisible != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("timelineVisible", timelineVisible));
		if (timelineLabels != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("timelineLabels", timelineLabels));
		if (showHierarchies != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("showHierarchies", showHierarchies));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3QueriesIdGetValidateBeforeCall(Integer id, String filters, Integer offset,
			Integer pageSize, String sortBy, String groupBy, Boolean showSums, Boolean timelineVisible,
			String timelineLabels, Boolean showHierarchies,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling apiV3QueriesIdGet(Async)");
		}

		com.squareup.okhttp.Call call = apiV3QueriesIdGetCall(id, filters, offset, pageSize, sortBy, groupBy, showSums,
				timelineVisible, timelineLabels, showHierarchies, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * View query Retreive an individual query as identified by the id parameter.
	 * Then end point accepts a number of parameters that can be used to override
	 * the resources&#x27; persisted parameters.
	 * 
	 * @param id              Query id (required)
	 * @param filters         JSON specifying filter conditions. The filters
	 *                        provided as parameters are not applied to the query
	 *                        but are instead used to override the query&#x27;s
	 *                        persisted filters. All filters also accepted by the
	 *                        work packages endpoint are accepted. (optional)
	 * @param offset          Page number inside the queries&#x27; result collection
	 *                        of work packages. (optional)
	 * @param pageSize        Number of elements to display per page for the
	 *                        queries&#x27; result collection of work packages.
	 *                        (optional)
	 * @param sortBy          JSON specifying sort criteria. The sort criteria is
	 *                        applied to the querie&#x27;s result collection of work
	 *                        packages overriding the query&#x27;s persisted sort
	 *                        criteria. (optional)
	 * @param groupBy         The column to group by. The grouping criteria is
	 *                        applied to the to the querie&#x27;s result collection
	 *                        of work packages overriding the query&#x27;s persisted
	 *                        group criteria. (optional)
	 * @param showSums        Indicates whether properties should be summed up if
	 *                        they support it. The showSums parameter is applied to
	 *                        the to the querie&#x27;s result collection of work
	 *                        packages overriding the query&#x27;s persisted sums
	 *                        property. (optional)
	 * @param timelineVisible Indicates whether the timeline should be shown.
	 *                        (optional)
	 * @param timelineLabels  Overridden labels in the timeline view (optional)
	 * @param showHierarchies Indicates whether the hierarchy mode should be
	 *                        enabled. (optional)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3QueriesIdGet(Integer id, String filters, Integer offset, Integer pageSize, String sortBy,
			String groupBy, Boolean showSums, Boolean timelineVisible, String timelineLabels, Boolean showHierarchies)
			throws ApiException {
		apiV3QueriesIdGetWithHttpInfo(id, filters, offset, pageSize, sortBy, groupBy, showSums, timelineVisible,
				timelineLabels, showHierarchies);
	}

	/**
	 * View query Retreive an individual query as identified by the id parameter.
	 * Then end point accepts a number of parameters that can be used to override
	 * the resources&#x27; persisted parameters.
	 * 
	 * @param id              Query id (required)
	 * @param filters         JSON specifying filter conditions. The filters
	 *                        provided as parameters are not applied to the query
	 *                        but are instead used to override the query&#x27;s
	 *                        persisted filters. All filters also accepted by the
	 *                        work packages endpoint are accepted. (optional)
	 * @param offset          Page number inside the queries&#x27; result collection
	 *                        of work packages. (optional)
	 * @param pageSize        Number of elements to display per page for the
	 *                        queries&#x27; result collection of work packages.
	 *                        (optional)
	 * @param sortBy          JSON specifying sort criteria. The sort criteria is
	 *                        applied to the querie&#x27;s result collection of work
	 *                        packages overriding the query&#x27;s persisted sort
	 *                        criteria. (optional)
	 * @param groupBy         The column to group by. The grouping criteria is
	 *                        applied to the to the querie&#x27;s result collection
	 *                        of work packages overriding the query&#x27;s persisted
	 *                        group criteria. (optional)
	 * @param showSums        Indicates whether properties should be summed up if
	 *                        they support it. The showSums parameter is applied to
	 *                        the to the querie&#x27;s result collection of work
	 *                        packages overriding the query&#x27;s persisted sums
	 *                        property. (optional)
	 * @param timelineVisible Indicates whether the timeline should be shown.
	 *                        (optional)
	 * @param timelineLabels  Overridden labels in the timeline view (optional)
	 * @param showHierarchies Indicates whether the hierarchy mode should be
	 *                        enabled. (optional)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3QueriesIdGetWithHttpInfo(Integer id, String filters, Integer offset, Integer pageSize,
			String sortBy, String groupBy, Boolean showSums, Boolean timelineVisible, String timelineLabels,
			Boolean showHierarchies) throws ApiException {
		com.squareup.okhttp.Call call = apiV3QueriesIdGetValidateBeforeCall(id, filters, offset, pageSize, sortBy,
				groupBy, showSums, timelineVisible, timelineLabels, showHierarchies, null, null);
		return apiClient.execute(call);
	}

	/**
	 * View query (asynchronously) Retreive an individual query as identified by the
	 * id parameter. Then end point accepts a number of parameters that can be used
	 * to override the resources&#x27; persisted parameters.
	 * 
	 * @param id              Query id (required)
	 * @param filters         JSON specifying filter conditions. The filters
	 *                        provided as parameters are not applied to the query
	 *                        but are instead used to override the query&#x27;s
	 *                        persisted filters. All filters also accepted by the
	 *                        work packages endpoint are accepted. (optional)
	 * @param offset          Page number inside the queries&#x27; result collection
	 *                        of work packages. (optional)
	 * @param pageSize        Number of elements to display per page for the
	 *                        queries&#x27; result collection of work packages.
	 *                        (optional)
	 * @param sortBy          JSON specifying sort criteria. The sort criteria is
	 *                        applied to the querie&#x27;s result collection of work
	 *                        packages overriding the query&#x27;s persisted sort
	 *                        criteria. (optional)
	 * @param groupBy         The column to group by. The grouping criteria is
	 *                        applied to the to the querie&#x27;s result collection
	 *                        of work packages overriding the query&#x27;s persisted
	 *                        group criteria. (optional)
	 * @param showSums        Indicates whether properties should be summed up if
	 *                        they support it. The showSums parameter is applied to
	 *                        the to the querie&#x27;s result collection of work
	 *                        packages overriding the query&#x27;s persisted sums
	 *                        property. (optional)
	 * @param timelineVisible Indicates whether the timeline should be shown.
	 *                        (optional)
	 * @param timelineLabels  Overridden labels in the timeline view (optional)
	 * @param showHierarchies Indicates whether the hierarchy mode should be
	 *                        enabled. (optional)
	 * @param callback        The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3QueriesIdGetAsync(Integer id, String filters, Integer offset, Integer pageSize,
			String sortBy, String groupBy, Boolean showSums, Boolean timelineVisible, String timelineLabels,
			Boolean showHierarchies, final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3QueriesIdGetValidateBeforeCall(id, filters, offset, pageSize, sortBy,
				groupBy, showSums, timelineVisible, timelineLabels, showHierarchies, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3QueriesIdPatch
	 * 
	 * @param id                      Query id (required)
	 * @param body                    (optional)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3QueriesIdPatchCall(Integer id, Object body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/api/v3/queries/{id}".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "*/*" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3QueriesIdPatchValidateBeforeCall(Integer id, Object body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling apiV3QueriesIdPatch(Async)");
		}

		com.squareup.okhttp.Call call = apiV3QueriesIdPatchCall(id, body, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Edit Query When calling this endpoint the client provides a single object,
	 * containing the properties and links that it wants to change, in the body.
	 * Note that it is only allowed to provide properties or links supporting the
	 * **write** operation.
	 * 
	 * @param id   Query id (required)
	 * @param body (optional)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3QueriesIdPatch(Integer id, Object body) throws ApiException {
		apiV3QueriesIdPatchWithHttpInfo(id, body);
	}

	/**
	 * Edit Query When calling this endpoint the client provides a single object,
	 * containing the properties and links that it wants to change, in the body.
	 * Note that it is only allowed to provide properties or links supporting the
	 * **write** operation.
	 * 
	 * @param id   Query id (required)
	 * @param body (optional)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3QueriesIdPatchWithHttpInfo(Integer id, Object body) throws ApiException {
		com.squareup.okhttp.Call call = apiV3QueriesIdPatchValidateBeforeCall(id, body, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Edit Query (asynchronously) When calling this endpoint the client provides a
	 * single object, containing the properties and links that it wants to change,
	 * in the body. Note that it is only allowed to provide properties or links
	 * supporting the **write** operation.
	 * 
	 * @param id       Query id (required)
	 * @param body     (optional)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3QueriesIdPatchAsync(Integer id, Object body, final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3QueriesIdPatchValidateBeforeCall(id, body, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3QueriesIdStarPatch
	 * 
	 * @param id                      Query id (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3QueriesIdStarPatchCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/queries/{id}/star".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3QueriesIdStarPatchValidateBeforeCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling apiV3QueriesIdStarPatch(Async)");
		}

		com.squareup.okhttp.Call call = apiV3QueriesIdStarPatchCall(id, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Star query
	 * 
	 * @param id Query id (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3QueriesIdStarPatch(Integer id) throws ApiException {
		apiV3QueriesIdStarPatchWithHttpInfo(id);
	}

	/**
	 * Star query
	 * 
	 * @param id Query id (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3QueriesIdStarPatchWithHttpInfo(Integer id) throws ApiException {
		com.squareup.okhttp.Call call = apiV3QueriesIdStarPatchValidateBeforeCall(id, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Star query (asynchronously)
	 * 
	 * @param id       Query id (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3QueriesIdStarPatchAsync(Integer id, final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3QueriesIdStarPatchValidateBeforeCall(id, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3QueriesIdUnstarPatch
	 * 
	 * @param id                      Query id (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3QueriesIdUnstarPatchCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/queries/{id}/unstar".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3QueriesIdUnstarPatchValidateBeforeCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling apiV3QueriesIdUnstarPatch(Async)");
		}

		com.squareup.okhttp.Call call = apiV3QueriesIdUnstarPatchCall(id, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Unstar query
	 * 
	 * @param id Query id (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3QueriesIdUnstarPatch(Integer id) throws ApiException {
		apiV3QueriesIdUnstarPatchWithHttpInfo(id);
	}

	/**
	 * Unstar query
	 * 
	 * @param id Query id (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3QueriesIdUnstarPatchWithHttpInfo(Integer id) throws ApiException {
		com.squareup.okhttp.Call call = apiV3QueriesIdUnstarPatchValidateBeforeCall(id, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Unstar query (asynchronously)
	 * 
	 * @param id       Query id (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3QueriesIdUnstarPatchAsync(Integer id, final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3QueriesIdUnstarPatchValidateBeforeCall(id, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3QueriesPost
	 * 
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3QueriesPostCall(final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/queries";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3QueriesPostValidateBeforeCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = apiV3QueriesPostCall(progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Create query When calling this endpoint the client provides a single object,
	 * containing at least the properties and links that are required, in the body.
	 * The required fields of a Query can be found in its schema, which is embedded
	 * in the respective form. Note that it is only allowed to provide properties or
	 * links supporting the write operation.
	 * 
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3QueriesPost() throws ApiException {
		apiV3QueriesPostWithHttpInfo();
	}

	/**
	 * Create query When calling this endpoint the client provides a single object,
	 * containing at least the properties and links that are required, in the body.
	 * The required fields of a Query can be found in its schema, which is embedded
	 * in the respective form. Note that it is only allowed to provide properties or
	 * links supporting the write operation.
	 * 
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3QueriesPostWithHttpInfo() throws ApiException {
		com.squareup.okhttp.Call call = apiV3QueriesPostValidateBeforeCall(null, null);
		return apiClient.execute(call);
	}

	/**
	 * Create query (asynchronously) When calling this endpoint the client provides
	 * a single object, containing at least the properties and links that are
	 * required, in the body. The required fields of a Query can be found in its
	 * schema, which is embedded in the respective form. Note that it is only
	 * allowed to provide properties or links supporting the write operation.
	 * 
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3QueriesPostAsync(final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3QueriesPostValidateBeforeCall(progressListener, progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3QueriesSchemaGet
	 * 
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3QueriesSchemaGetCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/queries/schema";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3QueriesSchemaGetValidateBeforeCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = apiV3QueriesSchemaGetCall(progressListener, progressRequestListener);
		return call;

	}

	/**
	 * View schema for global queries Retrieve the schema for global queries, those,
	 * that are not assigned to a project.
	 * 
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3QueriesSchemaGet() throws ApiException {
		apiV3QueriesSchemaGetWithHttpInfo();
	}

	/**
	 * View schema for global queries Retrieve the schema for global queries, those,
	 * that are not assigned to a project.
	 * 
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3QueriesSchemaGetWithHttpInfo() throws ApiException {
		com.squareup.okhttp.Call call = apiV3QueriesSchemaGetValidateBeforeCall(null, null);
		return apiClient.execute(call);
	}

	/**
	 * View schema for global queries (asynchronously) Retrieve the schema for
	 * global queries, those, that are not assigned to a project.
	 * 
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3QueriesSchemaGetAsync(final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3QueriesSchemaGetValidateBeforeCall(progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}
}
