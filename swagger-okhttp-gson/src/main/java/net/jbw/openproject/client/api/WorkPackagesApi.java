/*
 * OpenProject API v3
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package net.jbw.openproject.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import net.jbw.openproject.client.invoker.ApiCallback;
import net.jbw.openproject.client.invoker.ApiClient;
import net.jbw.openproject.client.invoker.ApiException;
import net.jbw.openproject.client.invoker.ApiResponse;
import net.jbw.openproject.client.invoker.Configuration;
import net.jbw.openproject.client.invoker.Pair;
import net.jbw.openproject.client.invoker.ProgressRequestBody;
import net.jbw.openproject.client.invoker.ProgressResponseBody;
import net.jbw.openproject.client.model.WorkPackage;
import net.jbw.openproject.client.model.WorkPackages;

public class WorkPackagesApi {
	private ApiClient apiClient;

	public WorkPackagesApi() {
		this(Configuration.getDefaultApiClient());
	}

	public WorkPackagesApi(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	/**
	 * Build call for apiV3ProjectsIdWorkPackagesFormPost
	 * 
	 * @param id                      ID of the project in which the work package
	 *                                will be created (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3ProjectsIdWorkPackagesFormPostCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/projects/{id}/work_packages/form".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3ProjectsIdWorkPackagesFormPostValidateBeforeCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException(
					"Missing the required parameter 'id' when calling apiV3ProjectsIdWorkPackagesFormPost(Async)");
		}

		com.squareup.okhttp.Call call = apiV3ProjectsIdWorkPackagesFormPostCall(id, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * Work Package Create Form
	 * 
	 * @param id ID of the project in which the work package will be created
	 *           (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3ProjectsIdWorkPackagesFormPost(Integer id) throws ApiException {
		apiV3ProjectsIdWorkPackagesFormPostWithHttpInfo(id);
	}

	/**
	 * Work Package Create Form
	 * 
	 * @param id ID of the project in which the work package will be created
	 *           (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3ProjectsIdWorkPackagesFormPostWithHttpInfo(Integer id) throws ApiException {
		com.squareup.okhttp.Call call = apiV3ProjectsIdWorkPackagesFormPostValidateBeforeCall(id, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Work Package Create Form (asynchronously)
	 * 
	 * @param id       ID of the project in which the work package will be created
	 *                 (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3ProjectsIdWorkPackagesFormPostAsync(Integer id,
			final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3ProjectsIdWorkPackagesFormPostValidateBeforeCall(id, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3ProjectsIdWorkPackagesGet
	 * 
	 * @param id                      Project id (required)
	 * @param offset                  Page number inside the requested collection.
	 *                                (optional)
	 * @param pageSize                Number of elements to display per page.
	 *                                (optional)
	 * @param filters                 JSON specifying filter conditions. Accepts the
	 *                                same format as returned by the
	 *                                [queries](#queries) endpoint. (optional)
	 * @param sortBy                  JSON specifying sort criteria. Accepts the
	 *                                same format as returned by the
	 *                                [queries](#queries) endpoint. (optional)
	 * @param groupBy                 The column to group by. (optional)
	 * @param showSums                Indicates whether properties should be summed
	 *                                up if they support it. (optional)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3ProjectsIdWorkPackagesGetCall(Integer id, Integer offset, Integer pageSize,
			String filters, String sortBy, String groupBy, Boolean showSums,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/projects/{id}/work_packages".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		if (offset != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
		if (pageSize != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
		if (filters != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("filters", filters));
		if (sortBy != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
		if (groupBy != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("groupBy", groupBy));
		if (showSums != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("showSums", showSums));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3ProjectsIdWorkPackagesGetValidateBeforeCall(Integer id, Integer offset,
			Integer pageSize, String filters, String sortBy, String groupBy, Boolean showSums,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException(
					"Missing the required parameter 'id' when calling apiV3ProjectsIdWorkPackagesGet(Async)");
		}

		com.squareup.okhttp.Call call = apiV3ProjectsIdWorkPackagesGetCall(id, offset, pageSize, filters, sortBy,
				groupBy, showSums, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * List Work Packages
	 * 
	 * @param id       Project id (required)
	 * @param offset   Page number inside the requested collection. (optional)
	 * @param pageSize Number of elements to display per page. (optional)
	 * @param filters  JSON specifying filter conditions. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. (optional)
	 * @param sortBy   JSON specifying sort criteria. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. (optional)
	 * @param groupBy  The column to group by. (optional)
	 * @param showSums Indicates whether properties should be summed up if they
	 *                 support it. (optional)
	 * @return WorkPackages
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public WorkPackages apiV3ProjectsIdWorkPackagesGet(Integer id, Integer offset, Integer pageSize, String filters,
			String sortBy, String groupBy, Boolean showSums) throws ApiException {
		ApiResponse<WorkPackages> resp = apiV3ProjectsIdWorkPackagesGetWithHttpInfo(id, offset, pageSize, filters,
				sortBy, groupBy, showSums);
		return resp.getData();
	}

	/**
	 * List Work Packages
	 * 
	 * @param id       Project id (required)
	 * @param offset   Page number inside the requested collection. (optional)
	 * @param pageSize Number of elements to display per page. (optional)
	 * @param filters  JSON specifying filter conditions. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. (optional)
	 * @param sortBy   JSON specifying sort criteria. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. (optional)
	 * @param groupBy  The column to group by. (optional)
	 * @param showSums Indicates whether properties should be summed up if they
	 *                 support it. (optional)
	 * @return ApiResponse&lt;WorkPackages&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<WorkPackages> apiV3ProjectsIdWorkPackagesGetWithHttpInfo(Integer id, Integer offset,
			Integer pageSize, String filters, String sortBy, String groupBy, Boolean showSums) throws ApiException {
		com.squareup.okhttp.Call call = apiV3ProjectsIdWorkPackagesGetValidateBeforeCall(id, offset, pageSize, filters,
				sortBy, groupBy, showSums, null, null);
		Type localVarReturnType = new TypeToken<WorkPackages>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * List Work Packages (asynchronously)
	 * 
	 * @param id       Project id (required)
	 * @param offset   Page number inside the requested collection. (optional)
	 * @param pageSize Number of elements to display per page. (optional)
	 * @param filters  JSON specifying filter conditions. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. (optional)
	 * @param sortBy   JSON specifying sort criteria. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. (optional)
	 * @param groupBy  The column to group by. (optional)
	 * @param showSums Indicates whether properties should be summed up if they
	 *                 support it. (optional)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3ProjectsIdWorkPackagesGetAsync(Integer id, Integer offset, Integer pageSize,
			String filters, String sortBy, String groupBy, Boolean showSums, final ApiCallback<WorkPackages> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3ProjectsIdWorkPackagesGetValidateBeforeCall(id, offset, pageSize, filters,
				sortBy, groupBy, showSums, progressListener, progressRequestListener);
		Type localVarReturnType = new TypeToken<WorkPackages>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for apiV3ProjectsIdWorkPackagesPost
	 * 
	 * @param body                    Work package to add to the project (required)
	 * @param id                      Project id (required)
	 * @param notify                  Indicates whether change notifications (e.g.
	 *                                via E-Mail) should be sent. Note that this
	 *                                controls notifications for all users
	 *                                interested in changes to the work package
	 *                                (e.g. watchers, author and assignee), not just
	 *                                the current user. (optional)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3ProjectsIdWorkPackagesPostCall(WorkPackage body, Integer id, Boolean notify,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/api/v3/projects/{id}/work_packages".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		if (notify != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("notify", notify));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "*/*" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3ProjectsIdWorkPackagesPostValidateBeforeCall(WorkPackage body, Integer id,
			Boolean notify, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'body' is set
		if (body == null) {
			throw new ApiException(
					"Missing the required parameter 'body' when calling apiV3ProjectsIdWorkPackagesPost(Async)");
		}
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException(
					"Missing the required parameter 'id' when calling apiV3ProjectsIdWorkPackagesPost(Async)");
		}

		com.squareup.okhttp.Call call = apiV3ProjectsIdWorkPackagesPostCall(body, id, notify, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * Create Work Package When calling this endpoint the client provides a single
	 * object, containing at least the properties and links that are required, in
	 * the body. The required fields of a WorkPackage can be found in its schema,
	 * which is embedded in the respective form. Note that it is only allowed to
	 * provide properties or links supporting the write operation.
	 * 
	 * @param body   Work package to add to the project (required)
	 * @param id     Project id (required)
	 * @param notify Indicates whether change notifications (e.g. via E-Mail) should
	 *               be sent. Note that this controls notifications for all users
	 *               interested in changes to the work package (e.g. watchers,
	 *               author and assignee), not just the current user. (optional)
	 * @return WorkPackage
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public WorkPackage apiV3ProjectsIdWorkPackagesPost(WorkPackage body, Integer id, Boolean notify)
			throws ApiException {
		ApiResponse<WorkPackage> resp = apiV3ProjectsIdWorkPackagesPostWithHttpInfo(body, id, notify);
		return resp.getData();
	}

	/**
	 * Create Work Package When calling this endpoint the client provides a single
	 * object, containing at least the properties and links that are required, in
	 * the body. The required fields of a WorkPackage can be found in its schema,
	 * which is embedded in the respective form. Note that it is only allowed to
	 * provide properties or links supporting the write operation.
	 * 
	 * @param body   Work package to add to the project (required)
	 * @param id     Project id (required)
	 * @param notify Indicates whether change notifications (e.g. via E-Mail) should
	 *               be sent. Note that this controls notifications for all users
	 *               interested in changes to the work package (e.g. watchers,
	 *               author and assignee), not just the current user. (optional)
	 * @return ApiResponse&lt;WorkPackage&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<WorkPackage> apiV3ProjectsIdWorkPackagesPostWithHttpInfo(WorkPackage body, Integer id,
			Boolean notify) throws ApiException {
		com.squareup.okhttp.Call call = apiV3ProjectsIdWorkPackagesPostValidateBeforeCall(body, id, notify, null, null);
		Type localVarReturnType = new TypeToken<WorkPackage>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Create Work Package (asynchronously) When calling this endpoint the client
	 * provides a single object, containing at least the properties and links that
	 * are required, in the body. The required fields of a WorkPackage can be found
	 * in its schema, which is embedded in the respective form. Note that it is only
	 * allowed to provide properties or links supporting the write operation.
	 * 
	 * @param body     Work package to add to the project (required)
	 * @param id       Project id (required)
	 * @param notify   Indicates whether change notifications (e.g. via E-Mail)
	 *                 should be sent. Note that this controls notifications for all
	 *                 users interested in changes to the work package (e.g.
	 *                 watchers, author and assignee), not just the current user.
	 *                 (optional)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3ProjectsIdWorkPackagesPostAsync(WorkPackage body, Integer id, Boolean notify,
			final ApiCallback<WorkPackage> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3ProjectsIdWorkPackagesPostValidateBeforeCall(body, id, notify,
				progressListener, progressRequestListener);
		Type localVarReturnType = new TypeToken<WorkPackage>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for apiV3ProjectsProjectIdWorkPackagesAvailableAssigneesGet
	 * 
	 * @param projectId               Project id (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3ProjectsProjectIdWorkPackagesAvailableAssigneesGetCall(Integer projectId,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/projects/{project_id}/work_packages/available_assignees"
				.replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3ProjectsProjectIdWorkPackagesAvailableAssigneesGetValidateBeforeCall(
			Integer projectId, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling apiV3ProjectsProjectIdWorkPackagesAvailableAssigneesGet(Async)");
		}

		com.squareup.okhttp.Call call = apiV3ProjectsProjectIdWorkPackagesAvailableAssigneesGetCall(projectId,
				progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Available assignees Gets a list of users that can be assigned to work
	 * packages in the given project.
	 * 
	 * @param projectId Project id (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3ProjectsProjectIdWorkPackagesAvailableAssigneesGet(Integer projectId) throws ApiException {
		apiV3ProjectsProjectIdWorkPackagesAvailableAssigneesGetWithHttpInfo(projectId);
	}

	/**
	 * Available assignees Gets a list of users that can be assigned to work
	 * packages in the given project.
	 * 
	 * @param projectId Project id (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3ProjectsProjectIdWorkPackagesAvailableAssigneesGetWithHttpInfo(Integer projectId)
			throws ApiException {
		com.squareup.okhttp.Call call = apiV3ProjectsProjectIdWorkPackagesAvailableAssigneesGetValidateBeforeCall(
				projectId, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Available assignees (asynchronously) Gets a list of users that can be
	 * assigned to work packages in the given project.
	 * 
	 * @param projectId Project id (required)
	 * @param callback  The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3ProjectsProjectIdWorkPackagesAvailableAssigneesGetAsync(Integer projectId,
			final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3ProjectsProjectIdWorkPackagesAvailableAssigneesGetValidateBeforeCall(
				projectId, progressListener, progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3ProjectsProjectIdWorkPackagesAvailableResponsiblesGet
	 * 
	 * @param projectId               Project id (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3ProjectsProjectIdWorkPackagesAvailableResponsiblesGetCall(Integer projectId,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/projects/{project_id}/work_packages/available_responsibles"
				.replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3ProjectsProjectIdWorkPackagesAvailableResponsiblesGetValidateBeforeCall(
			Integer projectId, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'projectId' is set
		if (projectId == null) {
			throw new ApiException(
					"Missing the required parameter 'projectId' when calling apiV3ProjectsProjectIdWorkPackagesAvailableResponsiblesGet(Async)");
		}

		com.squareup.okhttp.Call call = apiV3ProjectsProjectIdWorkPackagesAvailableResponsiblesGetCall(projectId,
				progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Available responsibles Gets a list of users that can be assigned as the
	 * responsible of a work package in the given project.
	 * 
	 * @param projectId Project id (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3ProjectsProjectIdWorkPackagesAvailableResponsiblesGet(Integer projectId) throws ApiException {
		apiV3ProjectsProjectIdWorkPackagesAvailableResponsiblesGetWithHttpInfo(projectId);
	}

	/**
	 * Available responsibles Gets a list of users that can be assigned as the
	 * responsible of a work package in the given project.
	 * 
	 * @param projectId Project id (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3ProjectsProjectIdWorkPackagesAvailableResponsiblesGetWithHttpInfo(Integer projectId)
			throws ApiException {
		com.squareup.okhttp.Call call = apiV3ProjectsProjectIdWorkPackagesAvailableResponsiblesGetValidateBeforeCall(
				projectId, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Available responsibles (asynchronously) Gets a list of users that can be
	 * assigned as the responsible of a work package in the given project.
	 * 
	 * @param projectId Project id (required)
	 * @param callback  The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3ProjectsProjectIdWorkPackagesAvailableResponsiblesGetAsync(Integer projectId,
			final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3ProjectsProjectIdWorkPackagesAvailableResponsiblesGetValidateBeforeCall(
				projectId, progressListener, progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3WorkPackagesFormPost
	 * 
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesFormPostCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/work_packages/form";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3WorkPackagesFormPostValidateBeforeCall(
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = apiV3WorkPackagesFormPostCall(progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Work Package Create Form
	 * 
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3WorkPackagesFormPost() throws ApiException {
		apiV3WorkPackagesFormPostWithHttpInfo();
	}

	/**
	 * Work Package Create Form
	 * 
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3WorkPackagesFormPostWithHttpInfo() throws ApiException {
		com.squareup.okhttp.Call call = apiV3WorkPackagesFormPostValidateBeforeCall(null, null);
		return apiClient.execute(call);
	}

	/**
	 * Work Package Create Form (asynchronously)
	 * 
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesFormPostAsync(final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesFormPostValidateBeforeCall(progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3WorkPackagesGet
	 * 
	 * @param offset                  Page number inside the requested collection.
	 *                                (optional)
	 * @param pageSize                Number of elements to display per page.
	 *                                (optional)
	 * @param filters                 JSON specifying filter conditions. Accepts the
	 *                                same format as returned by the
	 *                                [queries](#queries) endpoint. (optional)
	 * @param sortBy                  JSON specifying sort criteria. Accepts the
	 *                                same format as returned by the
	 *                                [queries](#queries) endpoint. (optional)
	 * @param groupBy                 The column to group by. (optional)
	 * @param showSums                Indicates whether properties should be summed
	 *                                up if they support it. (optional)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesGetCall(Integer offset, Integer pageSize, String filters,
			String sortBy, String groupBy, Boolean showSums,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/work_packages";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		if (offset != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
		if (pageSize != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
		if (filters != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("filters", filters));
		if (sortBy != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("sortBy", sortBy));
		if (groupBy != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("groupBy", groupBy));
		if (showSums != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("showSums", showSums));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3WorkPackagesGetValidateBeforeCall(Integer offset, Integer pageSize,
			String filters, String sortBy, String groupBy, Boolean showSums,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = apiV3WorkPackagesGetCall(offset, pageSize, filters, sortBy, groupBy, showSums,
				progressListener, progressRequestListener);
		return call;

	}

	/**
	 * List Work Packages
	 * 
	 * @param offset   Page number inside the requested collection. (optional)
	 * @param pageSize Number of elements to display per page. (optional)
	 * @param filters  JSON specifying filter conditions. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. (optional)
	 * @param sortBy   JSON specifying sort criteria. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. (optional)
	 * @param groupBy  The column to group by. (optional)
	 * @param showSums Indicates whether properties should be summed up if they
	 *                 support it. (optional)
	 * @return WorkPackages
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public WorkPackages apiV3WorkPackagesGet(Integer offset, Integer pageSize, String filters, String sortBy,
			String groupBy, Boolean showSums) throws ApiException {
		ApiResponse<WorkPackages> resp = apiV3WorkPackagesGetWithHttpInfo(offset, pageSize, filters, sortBy, groupBy,
				showSums);
		return resp.getData();
	}

	/**
	 * List Work Packages
	 * 
	 * @param offset   Page number inside the requested collection. (optional)
	 * @param pageSize Number of elements to display per page. (optional)
	 * @param filters  JSON specifying filter conditions. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. (optional)
	 * @param sortBy   JSON specifying sort criteria. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. (optional)
	 * @param groupBy  The column to group by. (optional)
	 * @param showSums Indicates whether properties should be summed up if they
	 *                 support it. (optional)
	 * @return ApiResponse&lt;WorkPackages&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<WorkPackages> apiV3WorkPackagesGetWithHttpInfo(Integer offset, Integer pageSize, String filters,
			String sortBy, String groupBy, Boolean showSums) throws ApiException {
		com.squareup.okhttp.Call call = apiV3WorkPackagesGetValidateBeforeCall(offset, pageSize, filters, sortBy,
				groupBy, showSums, null, null);
		Type localVarReturnType = new TypeToken<WorkPackages>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * List Work Packages (asynchronously)
	 * 
	 * @param offset   Page number inside the requested collection. (optional)
	 * @param pageSize Number of elements to display per page. (optional)
	 * @param filters  JSON specifying filter conditions. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. (optional)
	 * @param sortBy   JSON specifying sort criteria. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. (optional)
	 * @param groupBy  The column to group by. (optional)
	 * @param showSums Indicates whether properties should be summed up if they
	 *                 support it. (optional)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesGetAsync(Integer offset, Integer pageSize, String filters,
			String sortBy, String groupBy, Boolean showSums, final ApiCallback<WorkPackages> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesGetValidateBeforeCall(offset, pageSize, filters, sortBy,
				groupBy, showSums, progressListener, progressRequestListener);
		Type localVarReturnType = new TypeToken<WorkPackages>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for apiV3WorkPackagesIdActivitiesGet
	 * 
	 * @param id                      Work package id (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesIdActivitiesGetCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/work_packages/{id}/activities".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3WorkPackagesIdActivitiesGetValidateBeforeCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException(
					"Missing the required parameter 'id' when calling apiV3WorkPackagesIdActivitiesGet(Async)");
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesIdActivitiesGetCall(id, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * List work package activities
	 * 
	 * @param id Work package id (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3WorkPackagesIdActivitiesGet(Integer id) throws ApiException {
		apiV3WorkPackagesIdActivitiesGetWithHttpInfo(id);
	}

	/**
	 * List work package activities
	 * 
	 * @param id Work package id (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3WorkPackagesIdActivitiesGetWithHttpInfo(Integer id) throws ApiException {
		com.squareup.okhttp.Call call = apiV3WorkPackagesIdActivitiesGetValidateBeforeCall(id, null, null);
		return apiClient.execute(call);
	}

	/**
	 * List work package activities (asynchronously)
	 * 
	 * @param id       Work package id (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesIdActivitiesGetAsync(Integer id, final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesIdActivitiesGetValidateBeforeCall(id, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3WorkPackagesIdActivitiesPost
	 * 
	 * @param id                      Work package id (required)
	 * @param body                    (optional)
	 * @param notify                  Indicates whether change notifications (e.g.
	 *                                via E-Mail) should be sent. Note that this
	 *                                controls notifications for all users
	 *                                interested in changes to the work package
	 *                                (e.g. watchers, author and assignee), not just
	 *                                the current user. (optional)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesIdActivitiesPostCall(Integer id, Object body, Boolean notify,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/api/v3/work_packages/{id}/activities".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		if (notify != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("notify", notify));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "*/*" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3WorkPackagesIdActivitiesPostValidateBeforeCall(Integer id, Object body,
			Boolean notify, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException(
					"Missing the required parameter 'id' when calling apiV3WorkPackagesIdActivitiesPost(Async)");
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesIdActivitiesPostCall(id, body, notify, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * Comment work package Creates an activity for the selected work package and,
	 * on success, returns the updated activity.
	 * 
	 * @param id     Work package id (required)
	 * @param body   (optional)
	 * @param notify Indicates whether change notifications (e.g. via E-Mail) should
	 *               be sent. Note that this controls notifications for all users
	 *               interested in changes to the work package (e.g. watchers,
	 *               author and assignee), not just the current user. (optional)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3WorkPackagesIdActivitiesPost(Integer id, Object body, Boolean notify) throws ApiException {
		apiV3WorkPackagesIdActivitiesPostWithHttpInfo(id, body, notify);
	}

	/**
	 * Comment work package Creates an activity for the selected work package and,
	 * on success, returns the updated activity.
	 * 
	 * @param id     Work package id (required)
	 * @param body   (optional)
	 * @param notify Indicates whether change notifications (e.g. via E-Mail) should
	 *               be sent. Note that this controls notifications for all users
	 *               interested in changes to the work package (e.g. watchers,
	 *               author and assignee), not just the current user. (optional)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3WorkPackagesIdActivitiesPostWithHttpInfo(Integer id, Object body, Boolean notify)
			throws ApiException {
		com.squareup.okhttp.Call call = apiV3WorkPackagesIdActivitiesPostValidateBeforeCall(id, body, notify, null,
				null);
		return apiClient.execute(call);
	}

	/**
	 * Comment work package (asynchronously) Creates an activity for the selected
	 * work package and, on success, returns the updated activity.
	 * 
	 * @param id       Work package id (required)
	 * @param body     (optional)
	 * @param notify   Indicates whether change notifications (e.g. via E-Mail)
	 *                 should be sent. Note that this controls notifications for all
	 *                 users interested in changes to the work package (e.g.
	 *                 watchers, author and assignee), not just the current user.
	 *                 (optional)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesIdActivitiesPostAsync(Integer id, Object body, Boolean notify,
			final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesIdActivitiesPostValidateBeforeCall(id, body, notify,
				progressListener, progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3WorkPackagesIdAvailableProjectsGet
	 * 
	 * @param id                      work package id (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesIdAvailableProjectsGetCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/work_packages/{id}/available_projects".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3WorkPackagesIdAvailableProjectsGetValidateBeforeCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException(
					"Missing the required parameter 'id' when calling apiV3WorkPackagesIdAvailableProjectsGet(Async)");
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesIdAvailableProjectsGetCall(id, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * Available projects Gets a list of projects that are available as projects to
	 * which the work package can be moved.
	 * 
	 * @param id work package id (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3WorkPackagesIdAvailableProjectsGet(Integer id) throws ApiException {
		apiV3WorkPackagesIdAvailableProjectsGetWithHttpInfo(id);
	}

	/**
	 * Available projects Gets a list of projects that are available as projects to
	 * which the work package can be moved.
	 * 
	 * @param id work package id (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3WorkPackagesIdAvailableProjectsGetWithHttpInfo(Integer id) throws ApiException {
		com.squareup.okhttp.Call call = apiV3WorkPackagesIdAvailableProjectsGetValidateBeforeCall(id, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Available projects (asynchronously) Gets a list of projects that are
	 * available as projects to which the work package can be moved.
	 * 
	 * @param id       work package id (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesIdAvailableProjectsGetAsync(Integer id,
			final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesIdAvailableProjectsGetValidateBeforeCall(id, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3WorkPackagesIdAvailableRelationCandidatesGet
	 * 
	 * @param id                      ID of workpackage to return (required)
	 * @param pageSize                Maximum number of candidates to list (default
	 *                                10) (optional)
	 * @param filters                 JSON specifying filter conditions. Accepts the
	 *                                same format as returned by the
	 *                                [queries](#queries) endpoint. (optional)
	 * @param query                   Shortcut for filtering by ID or subject
	 *                                (optional)
	 * @param type                    Type of relation to find candidates for
	 *                                (default \&quot;relates\&quot;) (optional)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesIdAvailableRelationCandidatesGetCall(Long id, Integer pageSize,
			String filters, String query, String type, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/work_packages/{id}/available_relation_candidates"
				.replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		if (pageSize != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
		if (filters != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("filters", filters));
		if (query != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
		if (type != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3WorkPackagesIdAvailableRelationCandidatesGetValidateBeforeCall(Long id,
			Integer pageSize, String filters, String query, String type,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException(
					"Missing the required parameter 'id' when calling apiV3WorkPackagesIdAvailableRelationCandidatesGet(Async)");
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesIdAvailableRelationCandidatesGetCall(id, pageSize, filters,
				query, type, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Available relation candidates
	 * 
	 * @param id       ID of workpackage to return (required)
	 * @param pageSize Maximum number of candidates to list (default 10) (optional)
	 * @param filters  JSON specifying filter conditions. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. (optional)
	 * @param query    Shortcut for filtering by ID or subject (optional)
	 * @param type     Type of relation to find candidates for (default
	 *                 \&quot;relates\&quot;) (optional)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3WorkPackagesIdAvailableRelationCandidatesGet(Long id, Integer pageSize, String filters,
			String query, String type) throws ApiException {
		apiV3WorkPackagesIdAvailableRelationCandidatesGetWithHttpInfo(id, pageSize, filters, query, type);
	}

	/**
	 * Available relation candidates
	 * 
	 * @param id       ID of workpackage to return (required)
	 * @param pageSize Maximum number of candidates to list (default 10) (optional)
	 * @param filters  JSON specifying filter conditions. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. (optional)
	 * @param query    Shortcut for filtering by ID or subject (optional)
	 * @param type     Type of relation to find candidates for (default
	 *                 \&quot;relates\&quot;) (optional)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3WorkPackagesIdAvailableRelationCandidatesGetWithHttpInfo(Long id, Integer pageSize,
			String filters, String query, String type) throws ApiException {
		com.squareup.okhttp.Call call = apiV3WorkPackagesIdAvailableRelationCandidatesGetValidateBeforeCall(id,
				pageSize, filters, query, type, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Available relation candidates (asynchronously)
	 * 
	 * @param id       ID of workpackage to return (required)
	 * @param pageSize Maximum number of candidates to list (default 10) (optional)
	 * @param filters  JSON specifying filter conditions. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. (optional)
	 * @param query    Shortcut for filtering by ID or subject (optional)
	 * @param type     Type of relation to find candidates for (default
	 *                 \&quot;relates\&quot;) (optional)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesIdAvailableRelationCandidatesGetAsync(Long id, Integer pageSize,
			String filters, String query, String type, final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesIdAvailableRelationCandidatesGetValidateBeforeCall(id,
				pageSize, filters, query, type, progressListener, progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3WorkPackagesIdAvailableWatchersGet
	 * 
	 * @param id                      work package id (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesIdAvailableWatchersGetCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/work_packages/{id}/available_watchers".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3WorkPackagesIdAvailableWatchersGetValidateBeforeCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException(
					"Missing the required parameter 'id' when calling apiV3WorkPackagesIdAvailableWatchersGet(Async)");
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesIdAvailableWatchersGetCall(id, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * Available watchers Gets a list of users that are able to be watchers of the
	 * specified work package.
	 * 
	 * @param id work package id (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3WorkPackagesIdAvailableWatchersGet(Integer id) throws ApiException {
		apiV3WorkPackagesIdAvailableWatchersGetWithHttpInfo(id);
	}

	/**
	 * Available watchers Gets a list of users that are able to be watchers of the
	 * specified work package.
	 * 
	 * @param id work package id (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3WorkPackagesIdAvailableWatchersGetWithHttpInfo(Integer id) throws ApiException {
		com.squareup.okhttp.Call call = apiV3WorkPackagesIdAvailableWatchersGetValidateBeforeCall(id, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Available watchers (asynchronously) Gets a list of users that are able to be
	 * watchers of the specified work package.
	 * 
	 * @param id       work package id (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesIdAvailableWatchersGetAsync(Integer id,
			final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesIdAvailableWatchersGetValidateBeforeCall(id, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3WorkPackagesIdDelete
	 * 
	 * @param id                      Work package id (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesIdDeleteCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/work_packages/{id}".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3WorkPackagesIdDeleteValidateBeforeCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling apiV3WorkPackagesIdDelete(Async)");
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesIdDeleteCall(id, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Delete Work Package Deletes the work package, as well as: * all associated
	 * time entries * its hierarchy of child work packages
	 * 
	 * @param id Work package id (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3WorkPackagesIdDelete(Integer id) throws ApiException {
		apiV3WorkPackagesIdDeleteWithHttpInfo(id);
	}

	/**
	 * Delete Work Package Deletes the work package, as well as: * all associated
	 * time entries * its hierarchy of child work packages
	 * 
	 * @param id Work package id (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3WorkPackagesIdDeleteWithHttpInfo(Integer id) throws ApiException {
		com.squareup.okhttp.Call call = apiV3WorkPackagesIdDeleteValidateBeforeCall(id, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Delete Work Package (asynchronously) Deletes the work package, as well as: *
	 * all associated time entries * its hierarchy of child work packages
	 * 
	 * @param id       Work package id (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesIdDeleteAsync(Integer id, final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesIdDeleteValidateBeforeCall(id, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3WorkPackagesIdFormPost
	 * 
	 * @param id                      ID of the work package being modified
	 *                                (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesIdFormPostCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/work_packages/{id}/form".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3WorkPackagesIdFormPostValidateBeforeCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException(
					"Missing the required parameter 'id' when calling apiV3WorkPackagesIdFormPost(Async)");
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesIdFormPostCall(id, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Work Package Edit Form
	 * 
	 * @param id ID of the work package being modified (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3WorkPackagesIdFormPost(Integer id) throws ApiException {
		apiV3WorkPackagesIdFormPostWithHttpInfo(id);
	}

	/**
	 * Work Package Edit Form
	 * 
	 * @param id ID of the work package being modified (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3WorkPackagesIdFormPostWithHttpInfo(Integer id) throws ApiException {
		com.squareup.okhttp.Call call = apiV3WorkPackagesIdFormPostValidateBeforeCall(id, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Work Package Edit Form (asynchronously)
	 * 
	 * @param id       ID of the work package being modified (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesIdFormPostAsync(Integer id, final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesIdFormPostValidateBeforeCall(id, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3WorkPackagesIdGet
	 * 
	 * @param id                      Work package id (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesIdGetCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/work_packages/{id}".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3WorkPackagesIdGetValidateBeforeCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling apiV3WorkPackagesIdGet(Async)");
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesIdGetCall(id, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * View Work Package
	 * 
	 * @param id Work package id (required)
	 * @return WorkPackage
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public WorkPackage apiV3WorkPackagesIdGet(Integer id) throws ApiException {
		ApiResponse<WorkPackage> resp = apiV3WorkPackagesIdGetWithHttpInfo(id);
		return resp.getData();
	}

	/**
	 * View Work Package
	 * 
	 * @param id Work package id (required)
	 * @return ApiResponse&lt;WorkPackage&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<WorkPackage> apiV3WorkPackagesIdGetWithHttpInfo(Integer id) throws ApiException {
		com.squareup.okhttp.Call call = apiV3WorkPackagesIdGetValidateBeforeCall(id, null, null);
		Type localVarReturnType = new TypeToken<WorkPackage>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * View Work Package (asynchronously)
	 * 
	 * @param id       Work package id (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesIdGetAsync(Integer id, final ApiCallback<WorkPackage> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesIdGetValidateBeforeCall(id, progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<WorkPackage>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for apiV3WorkPackagesIdPatch
	 * 
	 * @param id                      Work package id (required)
	 * @param body                    (optional)
	 * @param notify                  Indicates whether change notifications (e.g.
	 *                                via E-Mail) should be sent. Note that this
	 *                                controls notifications for all users
	 *                                interested in changes to the work package
	 *                                (e.g. watchers, author and assignee), not just
	 *                                the current user. (optional)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesIdPatchCall(Integer id, WorkPackage body, Boolean notify,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/api/v3/work_packages/{id}".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		if (notify != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("notify", notify));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "*/*" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3WorkPackagesIdPatchValidateBeforeCall(Integer id, WorkPackage body,
			Boolean notify, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling apiV3WorkPackagesIdPatch(Async)");
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesIdPatchCall(id, body, notify, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * Edit Work Package When calling this endpoint the client provides a single
	 * object, containing the properties and links that it wants to change, in the
	 * body. Note that it is only allowed to provide properties or links supporting
	 * the **write** operation. Additionally to the fields the client wants to
	 * change, it is mandatory to provide the value of &#x60;lockVersion&#x60; which
	 * was received by the &#x60;GET&#x60; request this change originates from. The
	 * value of &#x60;lockVersion&#x60; is used to implement [optimistic
	 * locking](http://en.wikipedia.org/wiki/Optimistic_concurrency_control).
	 * 
	 * @param id     Work package id (required)
	 * @param body   (optional)
	 * @param notify Indicates whether change notifications (e.g. via E-Mail) should
	 *               be sent. Note that this controls notifications for all users
	 *               interested in changes to the work package (e.g. watchers,
	 *               author and assignee), not just the current user. (optional)
	 * @return WorkPackage
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public WorkPackage apiV3WorkPackagesIdPatch(Integer id, WorkPackage body, Boolean notify) throws ApiException {
		ApiResponse<WorkPackage> resp = apiV3WorkPackagesIdPatchWithHttpInfo(id, body, notify);
		return resp.getData();
	}

	/**
	 * Edit Work Package When calling this endpoint the client provides a single
	 * object, containing the properties and links that it wants to change, in the
	 * body. Note that it is only allowed to provide properties or links supporting
	 * the **write** operation. Additionally to the fields the client wants to
	 * change, it is mandatory to provide the value of &#x60;lockVersion&#x60; which
	 * was received by the &#x60;GET&#x60; request this change originates from. The
	 * value of &#x60;lockVersion&#x60; is used to implement [optimistic
	 * locking](http://en.wikipedia.org/wiki/Optimistic_concurrency_control).
	 * 
	 * @param id     Work package id (required)
	 * @param body   (optional)
	 * @param notify Indicates whether change notifications (e.g. via E-Mail) should
	 *               be sent. Note that this controls notifications for all users
	 *               interested in changes to the work package (e.g. watchers,
	 *               author and assignee), not just the current user. (optional)
	 * @return ApiResponse&lt;WorkPackage&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<WorkPackage> apiV3WorkPackagesIdPatchWithHttpInfo(Integer id, WorkPackage body, Boolean notify)
			throws ApiException {
		com.squareup.okhttp.Call call = apiV3WorkPackagesIdPatchValidateBeforeCall(id, body, notify, null, null);
		Type localVarReturnType = new TypeToken<WorkPackage>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Edit Work Package (asynchronously) When calling this endpoint the client
	 * provides a single object, containing the properties and links that it wants
	 * to change, in the body. Note that it is only allowed to provide properties or
	 * links supporting the **write** operation. Additionally to the fields the
	 * client wants to change, it is mandatory to provide the value of
	 * &#x60;lockVersion&#x60; which was received by the &#x60;GET&#x60; request
	 * this change originates from. The value of &#x60;lockVersion&#x60; is used to
	 * implement [optimistic
	 * locking](http://en.wikipedia.org/wiki/Optimistic_concurrency_control).
	 * 
	 * @param id       Work package id (required)
	 * @param body     (optional)
	 * @param notify   Indicates whether change notifications (e.g. via E-Mail)
	 *                 should be sent. Note that this controls notifications for all
	 *                 users interested in changes to the work package (e.g.
	 *                 watchers, author and assignee), not just the current user.
	 *                 (optional)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesIdPatchAsync(Integer id, WorkPackage body, Boolean notify,
			final ApiCallback<WorkPackage> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesIdPatchValidateBeforeCall(id, body, notify, progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<WorkPackage>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for apiV3WorkPackagesIdRelationsFormPost
	 * 
	 * @param id                      ID of the relation being modified (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesIdRelationsFormPostCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/work_packages/{id}/relations/form".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3WorkPackagesIdRelationsFormPostValidateBeforeCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException(
					"Missing the required parameter 'id' when calling apiV3WorkPackagesIdRelationsFormPost(Async)");
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesIdRelationsFormPostCall(id, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * Relation create form
	 * 
	 * @param id ID of the relation being modified (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3WorkPackagesIdRelationsFormPost(Integer id) throws ApiException {
		apiV3WorkPackagesIdRelationsFormPostWithHttpInfo(id);
	}

	/**
	 * Relation create form
	 * 
	 * @param id ID of the relation being modified (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3WorkPackagesIdRelationsFormPostWithHttpInfo(Integer id) throws ApiException {
		com.squareup.okhttp.Call call = apiV3WorkPackagesIdRelationsFormPostValidateBeforeCall(id, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Relation create form (asynchronously)
	 * 
	 * @param id       ID of the relation being modified (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesIdRelationsFormPostAsync(Integer id,
			final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesIdRelationsFormPostValidateBeforeCall(id, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3WorkPackagesIdRevisionsGet
	 * 
	 * @param id                      work package id (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesIdRevisionsGetCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/work_packages/{id}/revisions".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3WorkPackagesIdRevisionsGetValidateBeforeCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException(
					"Missing the required parameter 'id' when calling apiV3WorkPackagesIdRevisionsGet(Async)");
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesIdRevisionsGetCall(id, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * Revisions Gets a list of revisions that are linked to this work package,
	 * e.g., because it is referenced in the commit message of the revision. Only
	 * linked revisions from repositories are shown if the user has the view
	 * changesets permission in the defining project.
	 * 
	 * @param id work package id (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3WorkPackagesIdRevisionsGet(Integer id) throws ApiException {
		apiV3WorkPackagesIdRevisionsGetWithHttpInfo(id);
	}

	/**
	 * Revisions Gets a list of revisions that are linked to this work package,
	 * e.g., because it is referenced in the commit message of the revision. Only
	 * linked revisions from repositories are shown if the user has the view
	 * changesets permission in the defining project.
	 * 
	 * @param id work package id (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3WorkPackagesIdRevisionsGetWithHttpInfo(Integer id) throws ApiException {
		com.squareup.okhttp.Call call = apiV3WorkPackagesIdRevisionsGetValidateBeforeCall(id, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Revisions (asynchronously) Gets a list of revisions that are linked to this
	 * work package, e.g., because it is referenced in the commit message of the
	 * revision. Only linked revisions from repositories are shown if the user has
	 * the view changesets permission in the defining project.
	 * 
	 * @param id       work package id (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesIdRevisionsGetAsync(Integer id, final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesIdRevisionsGetValidateBeforeCall(id, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3WorkPackagesPost
	 * 
	 * @param body                    Work package to add (a project link is
	 *                                requried) (required)
	 * @param notify                  Indicates whether change notifications (e.g.
	 *                                via E-Mail) should be sent. Note that this
	 *                                controls notifications for all users
	 *                                interested in changes to the work package
	 *                                (e.g. watchers, author and assignee), not just
	 *                                the current user. (optional)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesPostCall(WorkPackage body, Boolean notify,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/api/v3/work_packages";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		if (notify != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("notify", notify));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "*/*" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3WorkPackagesPostValidateBeforeCall(WorkPackage body, Boolean notify,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'body' is set
		if (body == null) {
			throw new ApiException("Missing the required parameter 'body' when calling apiV3WorkPackagesPost(Async)");
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesPostCall(body, notify, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * Create Work Package When calling this endpoint the client provides a single
	 * object, containing at least the properties and links that are required, in
	 * the body. The required fields of a WorkPackage can be found in its schema,
	 * which is embedded in the respective form. Note that it is only allowed to
	 * provide properties or links supporting the write operation. A project link
	 * must be set when creating work packages through this route.
	 * 
	 * @param body   Work package to add (a project link is requried) (required)
	 * @param notify Indicates whether change notifications (e.g. via E-Mail) should
	 *               be sent. Note that this controls notifications for all users
	 *               interested in changes to the work package (e.g. watchers,
	 *               author and assignee), not just the current user. (optional)
	 * @return WorkPackage
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public WorkPackage apiV3WorkPackagesPost(WorkPackage body, Boolean notify) throws ApiException {
		ApiResponse<WorkPackage> resp = apiV3WorkPackagesPostWithHttpInfo(body, notify);
		return resp.getData();
	}

	/**
	 * Create Work Package When calling this endpoint the client provides a single
	 * object, containing at least the properties and links that are required, in
	 * the body. The required fields of a WorkPackage can be found in its schema,
	 * which is embedded in the respective form. Note that it is only allowed to
	 * provide properties or links supporting the write operation. A project link
	 * must be set when creating work packages through this route.
	 * 
	 * @param body   Work package to add (a project link is requried) (required)
	 * @param notify Indicates whether change notifications (e.g. via E-Mail) should
	 *               be sent. Note that this controls notifications for all users
	 *               interested in changes to the work package (e.g. watchers,
	 *               author and assignee), not just the current user. (optional)
	 * @return ApiResponse&lt;WorkPackage&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<WorkPackage> apiV3WorkPackagesPostWithHttpInfo(WorkPackage body, Boolean notify)
			throws ApiException {
		com.squareup.okhttp.Call call = apiV3WorkPackagesPostValidateBeforeCall(body, notify, null, null);
		Type localVarReturnType = new TypeToken<WorkPackage>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * Create Work Package (asynchronously) When calling this endpoint the client
	 * provides a single object, containing at least the properties and links that
	 * are required, in the body. The required fields of a WorkPackage can be found
	 * in its schema, which is embedded in the respective form. Note that it is only
	 * allowed to provide properties or links supporting the write operation. A
	 * project link must be set when creating work packages through this route.
	 * 
	 * @param body     Work package to add (a project link is requried) (required)
	 * @param notify   Indicates whether change notifications (e.g. via E-Mail)
	 *                 should be sent. Note that this controls notifications for all
	 *                 users interested in changes to the work package (e.g.
	 *                 watchers, author and assignee), not just the current user.
	 *                 (optional)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesPostAsync(WorkPackage body, Boolean notify,
			final ApiCallback<WorkPackage> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesPostValidateBeforeCall(body, notify, progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<WorkPackage>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for apiV3WorkPackagesSchemasGet
	 * 
	 * @param filters                 JSON specifying filter conditions. Accepts the
	 *                                same format as returned by the
	 *                                [queries](#queries) endpoint. Currently
	 *                                supported filters are: + id: The schema&#x27;s
	 *                                id (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesSchemasGetCall(String filters,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/work_packages/schemas/";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		if (filters != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("filters", filters));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3WorkPackagesSchemasGetValidateBeforeCall(String filters,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'filters' is set
		if (filters == null) {
			throw new ApiException(
					"Missing the required parameter 'filters' when calling apiV3WorkPackagesSchemasGet(Async)");
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesSchemasGetCall(filters, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * List Work Package Schemas List work package schemas.
	 * 
	 * @param filters JSON specifying filter conditions. Accepts the same format as
	 *                returned by the [queries](#queries) endpoint. Currently
	 *                supported filters are: + id: The schema&#x27;s id (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3WorkPackagesSchemasGet(String filters) throws ApiException {
		apiV3WorkPackagesSchemasGetWithHttpInfo(filters);
	}

	/**
	 * List Work Package Schemas List work package schemas.
	 * 
	 * @param filters JSON specifying filter conditions. Accepts the same format as
	 *                returned by the [queries](#queries) endpoint. Currently
	 *                supported filters are: + id: The schema&#x27;s id (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3WorkPackagesSchemasGetWithHttpInfo(String filters) throws ApiException {
		com.squareup.okhttp.Call call = apiV3WorkPackagesSchemasGetValidateBeforeCall(filters, null, null);
		return apiClient.execute(call);
	}

	/**
	 * List Work Package Schemas (asynchronously) List work package schemas.
	 * 
	 * @param filters  JSON specifying filter conditions. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. Currently
	 *                 supported filters are: + id: The schema&#x27;s id (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesSchemasGetAsync(String filters, final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesSchemasGetValidateBeforeCall(filters, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3WorkPackagesSchemasIdentifierGet
	 * 
	 * @param identifier              Identifier of the schema (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesSchemasIdentifierGetCall(String identifier,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/work_packages/schemas/{identifier}".replaceAll("\\{" + "identifier" + "\\}",
				apiClient.escapeString(identifier.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3WorkPackagesSchemasIdentifierGetValidateBeforeCall(String identifier,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'identifier' is set
		if (identifier == null) {
			throw new ApiException(
					"Missing the required parameter 'identifier' when calling apiV3WorkPackagesSchemasIdentifierGet(Async)");
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesSchemasIdentifierGetCall(identifier, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * View Work Package Schema
	 * 
	 * @param identifier Identifier of the schema (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3WorkPackagesSchemasIdentifierGet(String identifier) throws ApiException {
		apiV3WorkPackagesSchemasIdentifierGetWithHttpInfo(identifier);
	}

	/**
	 * View Work Package Schema
	 * 
	 * @param identifier Identifier of the schema (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3WorkPackagesSchemasIdentifierGetWithHttpInfo(String identifier) throws ApiException {
		com.squareup.okhttp.Call call = apiV3WorkPackagesSchemasIdentifierGetValidateBeforeCall(identifier, null, null);
		return apiClient.execute(call);
	}

	/**
	 * View Work Package Schema (asynchronously)
	 * 
	 * @param identifier Identifier of the schema (required)
	 * @param callback   The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesSchemasIdentifierGetAsync(String identifier,
			final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesSchemasIdentifierGetValidateBeforeCall(identifier,
				progressListener, progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3WorkPackagesWorkPackageIdRelationsGet
	 * 
	 * @param workPackageId           Work package id (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesWorkPackageIdRelationsGetCall(Integer workPackageId,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/work_packages/{work_package_id}/relations"
				.replaceAll("\\{" + "work_package_id" + "\\}", apiClient.escapeString(workPackageId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "text/plain" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3WorkPackagesWorkPackageIdRelationsGetValidateBeforeCall(Integer workPackageId,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'workPackageId' is set
		if (workPackageId == null) {
			throw new ApiException(
					"Missing the required parameter 'workPackageId' when calling apiV3WorkPackagesWorkPackageIdRelationsGet(Async)");
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesWorkPackageIdRelationsGetCall(workPackageId, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * List relations Lists all relations this work package is involved in.
	 * 
	 * @param workPackageId Work package id (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3WorkPackagesWorkPackageIdRelationsGet(Integer workPackageId) throws ApiException {
		apiV3WorkPackagesWorkPackageIdRelationsGetWithHttpInfo(workPackageId);
	}

	/**
	 * List relations Lists all relations this work package is involved in.
	 * 
	 * @param workPackageId Work package id (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3WorkPackagesWorkPackageIdRelationsGetWithHttpInfo(Integer workPackageId)
			throws ApiException {
		com.squareup.okhttp.Call call = apiV3WorkPackagesWorkPackageIdRelationsGetValidateBeforeCall(workPackageId,
				null, null);
		return apiClient.execute(call);
	}

	/**
	 * List relations (asynchronously) Lists all relations this work package is
	 * involved in.
	 * 
	 * @param workPackageId Work package id (required)
	 * @param callback      The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesWorkPackageIdRelationsGetAsync(Integer workPackageId,
			final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesWorkPackageIdRelationsGetValidateBeforeCall(workPackageId,
				progressListener, progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3WorkPackagesWorkPackageIdRelationsPost
	 * 
	 * @param workPackageId           Work package id (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesWorkPackageIdRelationsPostCall(Integer workPackageId,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/work_packages/{work_package_id}/relations"
				.replaceAll("\\{" + "work_package_id" + "\\}", apiClient.escapeString(workPackageId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3WorkPackagesWorkPackageIdRelationsPostValidateBeforeCall(
			Integer workPackageId, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'workPackageId' is set
		if (workPackageId == null) {
			throw new ApiException(
					"Missing the required parameter 'workPackageId' when calling apiV3WorkPackagesWorkPackageIdRelationsPost(Async)");
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesWorkPackageIdRelationsPostCall(workPackageId, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * Create Relation When calling this endpoint the client provides a single
	 * object, containing at least the properties and links that are required, in
	 * the body. The required fields of a Relation can be found in its schema, which
	 * is embedded in the respective form. Note that it is only allowed to provide
	 * properties or links supporting the write operation.
	 * 
	 * @param workPackageId Work package id (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3WorkPackagesWorkPackageIdRelationsPost(Integer workPackageId) throws ApiException {
		apiV3WorkPackagesWorkPackageIdRelationsPostWithHttpInfo(workPackageId);
	}

	/**
	 * Create Relation When calling this endpoint the client provides a single
	 * object, containing at least the properties and links that are required, in
	 * the body. The required fields of a Relation can be found in its schema, which
	 * is embedded in the respective form. Note that it is only allowed to provide
	 * properties or links supporting the write operation.
	 * 
	 * @param workPackageId Work package id (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3WorkPackagesWorkPackageIdRelationsPostWithHttpInfo(Integer workPackageId)
			throws ApiException {
		com.squareup.okhttp.Call call = apiV3WorkPackagesWorkPackageIdRelationsPostValidateBeforeCall(workPackageId,
				null, null);
		return apiClient.execute(call);
	}

	/**
	 * Create Relation (asynchronously) When calling this endpoint the client
	 * provides a single object, containing at least the properties and links that
	 * are required, in the body. The required fields of a Relation can be found in
	 * its schema, which is embedded in the respective form. Note that it is only
	 * allowed to provide properties or links supporting the write operation.
	 * 
	 * @param workPackageId Work package id (required)
	 * @param callback      The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesWorkPackageIdRelationsPostAsync(Integer workPackageId,
			final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesWorkPackageIdRelationsPostValidateBeforeCall(workPackageId,
				progressListener, progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3WorkPackagesWorkPackageIdWatchersGet
	 * 
	 * @param workPackageId           Work package id (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesWorkPackageIdWatchersGetCall(Integer workPackageId,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/work_packages/{work_package_id}/watchers"
				.replaceAll("\\{" + "work_package_id" + "\\}", apiClient.escapeString(workPackageId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3WorkPackagesWorkPackageIdWatchersGetValidateBeforeCall(Integer workPackageId,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'workPackageId' is set
		if (workPackageId == null) {
			throw new ApiException(
					"Missing the required parameter 'workPackageId' when calling apiV3WorkPackagesWorkPackageIdWatchersGet(Async)");
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesWorkPackageIdWatchersGetCall(workPackageId, progressListener,
				progressRequestListener);
		return call;

	}

	/**
	 * List watchers
	 * 
	 * @param workPackageId Work package id (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3WorkPackagesWorkPackageIdWatchersGet(Integer workPackageId) throws ApiException {
		apiV3WorkPackagesWorkPackageIdWatchersGetWithHttpInfo(workPackageId);
	}

	/**
	 * List watchers
	 * 
	 * @param workPackageId Work package id (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3WorkPackagesWorkPackageIdWatchersGetWithHttpInfo(Integer workPackageId)
			throws ApiException {
		com.squareup.okhttp.Call call = apiV3WorkPackagesWorkPackageIdWatchersGetValidateBeforeCall(workPackageId, null,
				null);
		return apiClient.execute(call);
	}

	/**
	 * List watchers (asynchronously)
	 * 
	 * @param workPackageId Work package id (required)
	 * @param callback      The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesWorkPackageIdWatchersGetAsync(Integer workPackageId,
			final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesWorkPackageIdWatchersGetValidateBeforeCall(workPackageId,
				progressListener, progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3WorkPackagesWorkPackageIdWatchersIdDelete
	 * 
	 * @param workPackageId           Work package id (required)
	 * @param id                      User id (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesWorkPackageIdWatchersIdDeleteCall(Integer workPackageId,
			Integer id, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/work_packages/{work_package_id}/watchers/{id}"
				.replaceAll("\\{" + "work_package_id" + "\\}", apiClient.escapeString(workPackageId.toString()))
				.replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3WorkPackagesWorkPackageIdWatchersIdDeleteValidateBeforeCall(
			Integer workPackageId, Integer id, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'workPackageId' is set
		if (workPackageId == null) {
			throw new ApiException(
					"Missing the required parameter 'workPackageId' when calling apiV3WorkPackagesWorkPackageIdWatchersIdDelete(Async)");
		}
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException(
					"Missing the required parameter 'id' when calling apiV3WorkPackagesWorkPackageIdWatchersIdDelete(Async)");
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesWorkPackageIdWatchersIdDeleteCall(workPackageId, id,
				progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Remove watcher Removes the specified user from the list of watchers for the
	 * given work package. If the request succeeds, the specified user is not
	 * watching the work package anymore. *Note: This might also be the case, if the
	 * specified user did not watch the work package prior to the request.*
	 * 
	 * @param workPackageId Work package id (required)
	 * @param id            User id (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3WorkPackagesWorkPackageIdWatchersIdDelete(Integer workPackageId, Integer id) throws ApiException {
		apiV3WorkPackagesWorkPackageIdWatchersIdDeleteWithHttpInfo(workPackageId, id);
	}

	/**
	 * Remove watcher Removes the specified user from the list of watchers for the
	 * given work package. If the request succeeds, the specified user is not
	 * watching the work package anymore. *Note: This might also be the case, if the
	 * specified user did not watch the work package prior to the request.*
	 * 
	 * @param workPackageId Work package id (required)
	 * @param id            User id (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3WorkPackagesWorkPackageIdWatchersIdDeleteWithHttpInfo(Integer workPackageId,
			Integer id) throws ApiException {
		com.squareup.okhttp.Call call = apiV3WorkPackagesWorkPackageIdWatchersIdDeleteValidateBeforeCall(workPackageId,
				id, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Remove watcher (asynchronously) Removes the specified user from the list of
	 * watchers for the given work package. If the request succeeds, the specified
	 * user is not watching the work package anymore. *Note: This might also be the
	 * case, if the specified user did not watch the work package prior to the
	 * request.*
	 * 
	 * @param workPackageId Work package id (required)
	 * @param id            User id (required)
	 * @param callback      The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesWorkPackageIdWatchersIdDeleteAsync(Integer workPackageId,
			Integer id, final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesWorkPackageIdWatchersIdDeleteValidateBeforeCall(workPackageId,
				id, progressListener, progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}

	/**
	 * Build call for apiV3WorkPackagesWorkPackageIdWatchersPost
	 * 
	 * @param workPackageId           Work package id (required)
	 * @param body                    (optional)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesWorkPackageIdWatchersPostCall(Integer workPackageId, Object body,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = body;

		// create path and map variables
		String localVarPath = "/api/v3/work_packages/{work_package_id}/watchers"
				.replaceAll("\\{" + "work_package_id" + "\\}", apiClient.escapeString(workPackageId.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = { "*/*" };
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3WorkPackagesWorkPackageIdWatchersPostValidateBeforeCall(Integer workPackageId,
			Object body, final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'workPackageId' is set
		if (workPackageId == null) {
			throw new ApiException(
					"Missing the required parameter 'workPackageId' when calling apiV3WorkPackagesWorkPackageIdWatchersPost(Async)");
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesWorkPackageIdWatchersPostCall(workPackageId, body,
				progressListener, progressRequestListener);
		return call;

	}

	/**
	 * Add watcher Adds a watcher to the specified work package. The request is
	 * expected to contain a single JSON object, that contains a link object under
	 * the &#x60;user&#x60; key. The response will be user added as watcher. In case
	 * the user was already watching the work package an &#x60;HTTP 200&#x60; is
	 * returned, an &#x60;HTTP 201&#x60; if the user was added as a new watcher.
	 * 
	 * @param workPackageId Work package id (required)
	 * @param body          (optional)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3WorkPackagesWorkPackageIdWatchersPost(Integer workPackageId, Object body) throws ApiException {
		apiV3WorkPackagesWorkPackageIdWatchersPostWithHttpInfo(workPackageId, body);
	}

	/**
	 * Add watcher Adds a watcher to the specified work package. The request is
	 * expected to contain a single JSON object, that contains a link object under
	 * the &#x60;user&#x60; key. The response will be user added as watcher. In case
	 * the user was already watching the work package an &#x60;HTTP 200&#x60; is
	 * returned, an &#x60;HTTP 201&#x60; if the user was added as a new watcher.
	 * 
	 * @param workPackageId Work package id (required)
	 * @param body          (optional)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3WorkPackagesWorkPackageIdWatchersPostWithHttpInfo(Integer workPackageId, Object body)
			throws ApiException {
		com.squareup.okhttp.Call call = apiV3WorkPackagesWorkPackageIdWatchersPostValidateBeforeCall(workPackageId,
				body, null, null);
		return apiClient.execute(call);
	}

	/**
	 * Add watcher (asynchronously) Adds a watcher to the specified work package.
	 * The request is expected to contain a single JSON object, that contains a link
	 * object under the &#x60;user&#x60; key. The response will be user added as
	 * watcher. In case the user was already watching the work package an &#x60;HTTP
	 * 200&#x60; is returned, an &#x60;HTTP 201&#x60; if the user was added as a new
	 * watcher.
	 * 
	 * @param workPackageId Work package id (required)
	 * @param body          (optional)
	 * @param callback      The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3WorkPackagesWorkPackageIdWatchersPostAsync(Integer workPackageId, Object body,
			final ApiCallback<Void> callback) throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3WorkPackagesWorkPackageIdWatchersPostValidateBeforeCall(workPackageId,
				body, progressListener, progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}
}
