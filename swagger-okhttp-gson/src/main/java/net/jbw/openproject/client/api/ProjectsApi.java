/*
 * OpenProject API v3
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package net.jbw.openproject.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import net.jbw.openproject.client.invoker.ApiCallback;
import net.jbw.openproject.client.invoker.ApiClient;
import net.jbw.openproject.client.invoker.ApiException;
import net.jbw.openproject.client.invoker.ApiResponse;
import net.jbw.openproject.client.invoker.Configuration;
import net.jbw.openproject.client.invoker.Pair;
import net.jbw.openproject.client.invoker.ProgressRequestBody;
import net.jbw.openproject.client.invoker.ProgressResponseBody;
import net.jbw.openproject.client.model.Project;
import net.jbw.openproject.client.model.Projects;

public class ProjectsApi {
	private ApiClient apiClient;

	public ProjectsApi() {
		this(Configuration.getDefaultApiClient());
	}

	public ProjectsApi(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	public ApiClient getApiClient() {
		return apiClient;
	}

	public void setApiClient(ApiClient apiClient) {
		this.apiClient = apiClient;
	}

	/**
	 * Build call for apiV3ProjectsGet
	 * 
	 * @param filters                 JSON specifying filter conditions. Accepts the
	 *                                same format as returned by the
	 *                                [queries](#queries) endpoint. Currently
	 *                                supported filters are: + ancestor: filters
	 *                                projects by their ancestor. A project is not
	 *                                considered to be it&#x27;s own ancestor.
	 *                                (optional)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3ProjectsGetCall(String filters,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/projects";

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
		if (filters != null)
			localVarQueryParams.addAll(apiClient.parameterToPair("filters", filters));

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "*/*" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3ProjectsGetValidateBeforeCall(String filters,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

		com.squareup.okhttp.Call call = apiV3ProjectsGetCall(filters, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * List projects Returns a collection of projects. The collection can be
	 * filtered via query parameters similar to how work packages are filtered. In
	 * addition to the provided filter, the result set is always limited to only
	 * contain projects the client is allowed to see.
	 * 
	 * @param filters JSON specifying filter conditions. Accepts the same format as
	 *                returned by the [queries](#queries) endpoint. Currently
	 *                supported filters are: + ancestor: filters projects by their
	 *                ancestor. A project is not considered to be it&#x27;s own
	 *                ancestor. (optional)
	 * @return Projects
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public Projects apiV3ProjectsGet(String filters) throws ApiException {
		ApiResponse<Projects> resp = apiV3ProjectsGetWithHttpInfo(filters);
		return resp.getData();
	}

	/**
	 * List projects Returns a collection of projects. The collection can be
	 * filtered via query parameters similar to how work packages are filtered. In
	 * addition to the provided filter, the result set is always limited to only
	 * contain projects the client is allowed to see.
	 * 
	 * @param filters JSON specifying filter conditions. Accepts the same format as
	 *                returned by the [queries](#queries) endpoint. Currently
	 *                supported filters are: + ancestor: filters projects by their
	 *                ancestor. A project is not considered to be it&#x27;s own
	 *                ancestor. (optional)
	 * @return ApiResponse&lt;Projects&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Projects> apiV3ProjectsGetWithHttpInfo(String filters) throws ApiException {
		com.squareup.okhttp.Call call = apiV3ProjectsGetValidateBeforeCall(filters, null, null);
		Type localVarReturnType = new TypeToken<Projects>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * List projects (asynchronously) Returns a collection of projects. The
	 * collection can be filtered via query parameters similar to how work packages
	 * are filtered. In addition to the provided filter, the result set is always
	 * limited to only contain projects the client is allowed to see.
	 * 
	 * @param filters  JSON specifying filter conditions. Accepts the same format as
	 *                 returned by the [queries](#queries) endpoint. Currently
	 *                 supported filters are: + ancestor: filters projects by their
	 *                 ancestor. A project is not considered to be it&#x27;s own
	 *                 ancestor. (optional)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3ProjectsGetAsync(String filters, final ApiCallback<Projects> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3ProjectsGetValidateBeforeCall(filters, progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<Projects>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for apiV3ProjectsIdGet
	 * 
	 * @param id                      Project id (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3ProjectsIdGetCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/projects/{id}".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3ProjectsIdGetValidateBeforeCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException("Missing the required parameter 'id' when calling apiV3ProjectsIdGet(Async)");
		}

		com.squareup.okhttp.Call call = apiV3ProjectsIdGetCall(id, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * View project
	 * 
	 * @param id Project id (required)
	 * @return Project
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public Project apiV3ProjectsIdGet(Integer id) throws ApiException {
		ApiResponse<Project> resp = apiV3ProjectsIdGetWithHttpInfo(id);
		return resp.getData();
	}

	/**
	 * View project
	 * 
	 * @param id Project id (required)
	 * @return ApiResponse&lt;Project&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Project> apiV3ProjectsIdGetWithHttpInfo(Integer id) throws ApiException {
		com.squareup.okhttp.Call call = apiV3ProjectsIdGetValidateBeforeCall(id, null, null);
		Type localVarReturnType = new TypeToken<Project>() {
		}.getType();
		return apiClient.execute(call, localVarReturnType);
	}

	/**
	 * View project (asynchronously)
	 * 
	 * @param id       Project id (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3ProjectsIdGetAsync(Integer id, final ApiCallback<Project> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3ProjectsIdGetValidateBeforeCall(id, progressListener,
				progressRequestListener);
		Type localVarReturnType = new TypeToken<Project>() {
		}.getType();
		apiClient.executeAsync(call, localVarReturnType, callback);
		return call;
	}

	/**
	 * Build call for apiV3VersionsIdProjectsGet
	 * 
	 * @param id                      Version id (required)
	 * @param progressListener        Progress listener
	 * @param progressRequestListener Progress request listener
	 * @return Call to execute
	 * @throws ApiException If fail to serialize the request body object
	 */
	public com.squareup.okhttp.Call apiV3VersionsIdProjectsGetCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		Object localVarPostBody = null;

		// create path and map variables
		String localVarPath = "/api/v3/versions/{id}/projects".replaceAll("\\{" + "id" + "\\}",
				apiClient.escapeString(id.toString()));

		List<Pair> localVarQueryParams = new ArrayList<Pair>();
		List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

		Map<String, String> localVarHeaderParams = new HashMap<String, String>();

		Map<String, Object> localVarFormParams = new HashMap<String, Object>();

		final String[] localVarAccepts = { "application/hal+json" };
		final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
		if (localVarAccept != null)
			localVarHeaderParams.put("Accept", localVarAccept);

		final String[] localVarContentTypes = {

		};
		final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
		localVarHeaderParams.put("Content-Type", localVarContentType);

		if (progressListener != null) {
			apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
				@Override
				public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain)
						throws IOException {
					com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
					return originalResponse.newBuilder()
							.body(new ProgressResponseBody(originalResponse.body(), progressListener)).build();
				}
			});
		}

		String[] localVarAuthNames = new String[] { "basicAuth" };
		return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams,
				localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
	}

	@SuppressWarnings("rawtypes")
	private com.squareup.okhttp.Call apiV3VersionsIdProjectsGetValidateBeforeCall(Integer id,
			final ProgressResponseBody.ProgressListener progressListener,
			final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
		// verify the required parameter 'id' is set
		if (id == null) {
			throw new ApiException(
					"Missing the required parameter 'id' when calling apiV3VersionsIdProjectsGet(Async)");
		}

		com.squareup.okhttp.Call call = apiV3VersionsIdProjectsGetCall(id, progressListener, progressRequestListener);
		return call;

	}

	/**
	 * List projects with version This endpoint lists the projects where the given
	 * version is available. The projects returned depend on the sharing settings of
	 * the given version, but are also limited to the projects that the current user
	 * is allowed to see.
	 * 
	 * @param id Version id (required)
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public void apiV3VersionsIdProjectsGet(Integer id) throws ApiException {
		apiV3VersionsIdProjectsGetWithHttpInfo(id);
	}

	/**
	 * List projects with version This endpoint lists the projects where the given
	 * version is available. The projects returned depend on the sharing settings of
	 * the given version, but are also limited to the projects that the current user
	 * is allowed to see.
	 * 
	 * @param id Version id (required)
	 * @return ApiResponse&lt;Void&gt;
	 * @throws ApiException If fail to call the API, e.g. server error or cannot
	 *                      deserialize the response body
	 */
	public ApiResponse<Void> apiV3VersionsIdProjectsGetWithHttpInfo(Integer id) throws ApiException {
		com.squareup.okhttp.Call call = apiV3VersionsIdProjectsGetValidateBeforeCall(id, null, null);
		return apiClient.execute(call);
	}

	/**
	 * List projects with version (asynchronously) This endpoint lists the projects
	 * where the given version is available. The projects returned depend on the
	 * sharing settings of the given version, but are also limited to the projects
	 * that the current user is allowed to see.
	 * 
	 * @param id       Version id (required)
	 * @param callback The callback to be executed when the API call finishes
	 * @return The request call
	 * @throws ApiException If fail to process the API call, e.g. serializing the
	 *                      request body object
	 */
	public com.squareup.okhttp.Call apiV3VersionsIdProjectsGetAsync(Integer id, final ApiCallback<Void> callback)
			throws ApiException {

		ProgressResponseBody.ProgressListener progressListener = null;
		ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

		if (callback != null) {
			progressListener = new ProgressResponseBody.ProgressListener() {
				@Override
				public void update(long bytesRead, long contentLength, boolean done) {
					callback.onDownloadProgress(bytesRead, contentLength, done);
				}
			};

			progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
				@Override
				public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
					callback.onUploadProgress(bytesWritten, contentLength, done);
				}
			};
		}

		com.squareup.okhttp.Call call = apiV3VersionsIdProjectsGetValidateBeforeCall(id, progressListener,
				progressRequestListener);
		apiClient.executeAsync(call, callback);
		return call;
	}
}
