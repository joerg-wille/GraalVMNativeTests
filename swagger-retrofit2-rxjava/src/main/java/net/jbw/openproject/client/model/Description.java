/*
 * OpenProject API v3
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package net.jbw.openproject.client.model;

import java.io.IOException;
import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Description
 */

public class Description {
	/**
	 * Gets or Sets format
	 */
	@JsonAdapter(FormatEnum.Adapter.class)
	public enum FormatEnum {
		TEXTILE("textile");

		private String value;

		FormatEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static FormatEnum fromValue(String text) {
			for (FormatEnum b : FormatEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<FormatEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public FormatEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return FormatEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("format")
	private FormatEnum format = null;

	@SerializedName("raw")
	private String raw = null;

	@SerializedName("html")
	private String html = null;

	public Description format(FormatEnum format) {
		this.format = format;
		return this;
	}

	/**
	 * Get format
	 * 
	 * @return format
	 **/
	@Schema(description = "")
	public FormatEnum getFormat() {
		return format;
	}

	public void setFormat(FormatEnum format) {
		this.format = format;
	}

	public Description raw(String raw) {
		this.raw = raw;
		return this;
	}

	/**
	 * Get raw
	 * 
	 * @return raw
	 **/
	@Schema(description = "")
	public String getRaw() {
		return raw;
	}

	public void setRaw(String raw) {
		this.raw = raw;
	}

	public Description html(String html) {
		this.html = html;
		return this;
	}

	/**
	 * Get html
	 * 
	 * @return html
	 **/
	@Schema(description = "")
	public String getHtml() {
		return html;
	}

	public void setHtml(String html) {
		this.html = html;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		Description description = (Description) o;
		return Objects.equals(this.format, description.format) && Objects.equals(this.raw, description.raw)
				&& Objects.equals(this.html, description.html);
	}

	@Override
	public int hashCode() {
		return Objects.hash(format, raw, html);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class Description {\n");

		sb.append("    format: ").append(toIndentedString(format)).append("\n");
		sb.append("    raw: ").append(toIndentedString(raw)).append("\n");
		sb.append("    html: ").append(toIndentedString(html)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
