/*
 * OpenProject API v3
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.jbw.openproject.client.api;

import net.jbw.openproject.client.invoker.ApiClient;
import net.jbw.openproject.client.invoker.ApiException;
import net.jbw.openproject.client.invoker.Pair;


import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;


public class QueryFilterInstanceSchemaApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;

  public QueryFilterInstanceSchemaApi() {
    this(new ApiClient());
  }

  public QueryFilterInstanceSchemaApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
  }

  /**
   * List Query Filter Instance Schemas for Project
   * Returns the list of QueryFilterInstanceSchemas defined for a query of the specified project.
   * @param id Id of the project. (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiV3ProjectsIdQueriesFilterInstanceSchemasGet (Integer id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'id' when calling apiV3ProjectsIdQueriesFilterInstanceSchemasGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v3/projects/{id}/queries/filter_instance_schemas"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "apiV3ProjectsIdQueriesFilterInstanceSchemasGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
              try {
                  return CompletableFuture.completedFuture(
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<>() {})
                  );
              } catch (IOException e) {
                      return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * List Query Filter Instance Schemas
   * Returns the list of QueryFilterInstanceSchemas defined for a global query. That is a query not assigned to a project.
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiV3QueriesFilterInstanceSchemasGet () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v3/queries/filter_instance_schemas";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "apiV3QueriesFilterInstanceSchemasGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
              try {
                  return CompletableFuture.completedFuture(
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<>() {})
                  );
              } catch (IOException e) {
                      return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * View Query Filter Instance Schema
   * Retreive an individual QueryFilterInstanceSchema as identified by the id parameter.
   * @param identifier QueryFilterInstanceSchema identifier. The identifier is the filter identifier. (required)
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<Void> apiV3QueriesFilterInstanceSchemasIdentifierGet (String identifier) throws ApiException {
    // verify the required parameter 'identifier' is set
    if (identifier == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'identifier' when calling apiV3QueriesFilterInstanceSchemasIdentifierGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v3/queries/filter_instance_schemas/{identifier}"
        .replace("{identifier}", ApiClient.urlEncode(identifier.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "apiV3QueriesFilterInstanceSchemasIdentifierGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
              try {
                  return CompletableFuture.completedFuture(
                      memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<>() {})
                  );
              } catch (IOException e) {
                      return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
}
